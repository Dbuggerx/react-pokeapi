{"ast":null,"code":"import { filter, map, mergeMap, catchError, switchMap } from \"rxjs/operators\";\nimport { of, Observable } from \"rxjs\";\nimport { actions } from \"./index\";\nimport { ApiError } from \"../errors\";\nimport { combineEpics } from \"redux-observable\";\n\nvar fetchPokemonEpic = function fetchPokemonEpic(action$, state$, _ref) {\n  var observableFetch = _ref.observableFetch;\n  return action$.pipe(filter(actions.fetchData.match), switchMap(function (action) {\n    var url = \"url\" in action.payload ? action.payload.url : \"https://pokeapi.co/api/v2/pokemon/\".concat(action.payload.name.toLowerCase(), \"/\");\n    return observableFetch(url).pipe(mergeMap(function (jsonResult) {\n      return new Observable(function (subscriber) {\n        subscriber.next(actions.dataFetched(jsonResult));\n        subscriber.next(actions.fetchSpecies(jsonResult.species.url));\n      });\n    }), catchError(function (error) {\n      return of(actions.setError(error instanceof ApiError && error.message === \"404\" ? \"Nothing found\" : error.message || error));\n    }));\n  }));\n};\n\nvar fetchPokemonSpeciesEpic = function fetchPokemonSpeciesEpic(action$, state$, _ref2) {\n  var observableFetch = _ref2.observableFetch;\n  return action$.pipe(filter(actions.fetchSpecies.match), switchMap(function (action) {\n    return observableFetch(action.payload).pipe(map(function (jsonResult) {\n      return actions.speciesFetched(jsonResult);\n    }), catchError(function (error) {\n      return of(actions.setSpeciesError(error instanceof ApiError && error.message === \"404\" ? \"Nothing found\" : error.message || error));\n    }));\n  }));\n};\n\nexport default combineEpics(fetchPokemonEpic, fetchPokemonSpeciesEpic);","map":{"version":3,"sources":["/home/dcestari/Documents/projects/react/react-pokeapi/src/redux/pokemonData/epics.ts"],"names":["filter","map","mergeMap","catchError","switchMap","of","Observable","actions","ApiError","combineEpics","fetchPokemonEpic","action$","state$","observableFetch","pipe","fetchData","match","action","url","payload","name","toLowerCase","jsonResult","subscriber","next","dataFetched","fetchSpecies","species","error","setError","message","fetchPokemonSpeciesEpic","speciesFetched","setSpeciesError"],"mappings":"AAAA,SAASA,MAAT,EAAiBC,GAAjB,EAAsBC,QAAtB,EAAgCC,UAAhC,EAA4CC,SAA5C,QAA6D,gBAA7D;AAEA,SAASC,EAAT,EAAaC,UAAb,QAA+B,MAA/B;AACA,SAASC,OAAT,QAAwB,SAAxB;AAEA,SAASC,QAAT,QAAyB,WAAzB;AACA,SAASC,YAAT,QAA6B,kBAA7B;;AAGA,IAAMC,gBAA2B,GAAG,SAA9BA,gBAA8B,CAACC,OAAD,EAAUC,MAAV,QAA0C;AAAA,MAAtBC,eAAsB,QAAtBA,eAAsB;AAC5E,SAAOF,OAAO,CAACG,IAAR,CACLd,MAAM,CAACO,OAAO,CAACQ,SAAR,CAAkBC,KAAnB,CADD,EAELZ,SAAS,CAAC,UAAAa,MAAM,EAAI;AAClB,QAAMC,GAAG,GACP,SAASD,MAAM,CAACE,OAAhB,GACIF,MAAM,CAACE,OAAP,CAAeD,GADnB,+CAEyCD,MAAM,CAACE,OAAP,CAAeC,IAAf,CAAoBC,WAApB,EAFzC,MADF;AAKA,WAAOR,eAAe,CAAWK,GAAX,CAAf,CAA+BJ,IAA/B,CACLZ,QAAQ,CACN,UAAAoB,UAAU;AAAA,aACR,IAAIhB,UAAJ,CAA0B,UAAAiB,UAAU,EAAI;AACtCA,QAAAA,UAAU,CAACC,IAAX,CAAgBjB,OAAO,CAACkB,WAAR,CAAoBH,UAApB,CAAhB;AACAC,QAAAA,UAAU,CAACC,IAAX,CAAgBjB,OAAO,CAACmB,YAAR,CAAqBJ,UAAU,CAACK,OAAX,CAAmBT,GAAxC,CAAhB;AACD,OAHD,CADQ;AAAA,KADJ,CADH,EAQLf,UAAU,CAAC,UAAAyB,KAAK;AAAA,aACdvB,EAAE,CACAE,OAAO,CAACsB,QAAR,CACED,KAAK,YAAYpB,QAAjB,IAA6BoB,KAAK,CAACE,OAAN,KAAkB,KAA/C,GACI,eADJ,GAEIF,KAAK,CAACE,OAAN,IAAiBF,KAHvB,CADA,CADY;AAAA,KAAN,CARL,CAAP;AAkBD,GAxBQ,CAFJ,CAAP;AA4BD,CA7BD;;AA+BA,IAAMG,uBAAkC,GAAG,SAArCA,uBAAqC,CAACpB,OAAD,EAAUC,MAAV;AAAA,MAAoBC,eAApB,SAAoBA,eAApB;AAAA,SACzCF,OAAO,CAACG,IAAR,CACEd,MAAM,CAACO,OAAO,CAACmB,YAAR,CAAqBV,KAAtB,CADR,EAEEZ,SAAS,CAAC,UAAAa,MAAM;AAAA,WACdJ,eAAe,CAAkBI,MAAM,CAACE,OAAzB,CAAf,CAAiDL,IAAjD,CACEb,GAAG,CAAC,UAAAqB,UAAU;AAAA,aAAIf,OAAO,CAACyB,cAAR,CAAuBV,UAAvB,CAAJ;AAAA,KAAX,CADL,EAEEnB,UAAU,CAAC,UAAAyB,KAAK;AAAA,aACdvB,EAAE,CACAE,OAAO,CAAC0B,eAAR,CACEL,KAAK,YAAYpB,QAAjB,IAA6BoB,KAAK,CAACE,OAAN,KAAkB,KAA/C,GACI,eADJ,GAEIF,KAAK,CAACE,OAAN,IAAiBF,KAHvB,CADA,CADY;AAAA,KAAN,CAFZ,CADc;AAAA,GAAP,CAFX,CADyC;AAAA,CAA3C;;AAmBA,eAAenB,YAAY,CAACC,gBAAD,EAAmBqB,uBAAnB,CAA3B","sourcesContent":["import { filter, map, mergeMap, catchError, switchMap } from \"rxjs/operators\";\nimport { IPokemon, IPokemonSpecies } from \"pokeapi-typescript\";\nimport { of, Observable } from \"rxjs\";\nimport { actions } from \"./index\";\nimport { TypedEpic } from \"../types\";\nimport { ApiError } from \"../errors\";\nimport { combineEpics } from \"redux-observable\";\nimport { AnyAction } from '@reduxjs/toolkit';\n\nconst fetchPokemonEpic: TypedEpic = (action$, state$, { observableFetch }) => {\n  return action$.pipe(\n    filter(actions.fetchData.match),\n    switchMap(action => {\n      const url =\n        \"url\" in action.payload\n          ? action.payload.url\n          : `https://pokeapi.co/api/v2/pokemon/${action.payload.name.toLowerCase()}/`;\n\n      return observableFetch<IPokemon>(url).pipe(\n        mergeMap(\n          jsonResult =>\n            new Observable<AnyAction>(subscriber => {\n              subscriber.next(actions.dataFetched(jsonResult));\n              subscriber.next(actions.fetchSpecies(jsonResult.species.url));\n            })\n        ),\n        catchError(error =>\n          of(\n            actions.setError(\n              error instanceof ApiError && error.message === \"404\"\n                ? \"Nothing found\"\n                : error.message || error\n            )\n          )\n        )\n      );\n    })\n  );\n};\n\nconst fetchPokemonSpeciesEpic: TypedEpic = (action$, state$, { observableFetch }) =>\n  action$.pipe(\n    filter(actions.fetchSpecies.match),\n    switchMap(action =>\n      observableFetch<IPokemonSpecies>(action.payload).pipe(\n        map(jsonResult => actions.speciesFetched(jsonResult)),\n        catchError(error =>\n          of(\n            actions.setSpeciesError(\n              error instanceof ApiError && error.message === \"404\"\n                ? \"Nothing found\"\n                : error.message || error\n            )\n          )\n        )\n      )\n    )\n  );\n\nexport default combineEpics(fetchPokemonEpic, fetchPokemonSpeciesEpic);\n"]},"metadata":{},"sourceType":"module"}