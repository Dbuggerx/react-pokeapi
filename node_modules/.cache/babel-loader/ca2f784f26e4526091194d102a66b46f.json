{"ast":null,"code":"/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */\nimport { merge as mergeStatic } from '../observable/merge';\nexport function merge() {\n  var observables = [];\n\n  for (var _i = 0; _i < arguments.length; _i++) {\n    observables[_i] = arguments[_i];\n  }\n\n  return function (source) {\n    return source.lift.call(mergeStatic.apply(void 0, [source].concat(observables)));\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/merge.ts"],"names":[],"mappings":"AAAA;AAsCA,SAAM,KAAA,IAAU,WAAhB,QAAqB,qBAArB;AAA4B,OAAA,SAAA,KAAA,GAAA;MAAA,WAAA,GAAA,E;;AAAA,OAAA,IAAA,EAAA,GAAA,CAAA,EAAA,EAAA,GAAA,SAAA,CAAA,MAAA,EAAoE,EAAA,EAApE,EAAoE;;AAC9F;;AACD,SAAA,UAAA,MAAA,EAAA;AAAA,WAAA,MAAA,CAAA,IAAA,CAAA,IAAA,CAAA,WAAA,CAAA,KAAA,CAAA,KAAA,CAAA,EAAA,CAAA,MAAA,EAAA,MAAA,CAAA,WAAA,CAAA,CAAA,CAAA;AAAA,GAAA","sourcesContent":["/** PURE_IMPORTS_START _observable_merge PURE_IMPORTS_END */\nimport { merge as mergeStatic } from '../observable/merge';\nexport function merge() {\n    var observables = [];\n    for (var _i = 0; _i < arguments.length; _i++) {\n        observables[_i] = arguments[_i];\n    }\n    return function (source) { return source.lift.call(mergeStatic.apply(void 0, [source].concat(observables))); };\n}\n//# sourceMappingURL=merge.js.map\n"]},"metadata":{},"sourceType":"module"}