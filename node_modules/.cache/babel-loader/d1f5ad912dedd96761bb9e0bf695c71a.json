{"ast":null,"code":"import { createSlice } from \"@reduxjs/toolkit\";\nexport default createSlice({\n  name: \"pokemonData\",\n  initialState: {\n    loading: false,\n    error: undefined,\n    data: undefined,\n    species: {\n      loading: false,\n      error: undefined,\n      data: undefined\n    }\n  },\n  reducers: {\n    fetchData: function fetchData(state, action) {\n      return {\n        loading: true,\n        error: undefined,\n        data: undefined,\n        species: {\n          loading: false,\n          error: undefined,\n          data: undefined\n        }\n      };\n    },\n    dataFetched: function dataFetched(state, action) {\n      state.loading = false;\n      state.error = undefined;\n      state.data = action.payload;\n    },\n    setError: function setError(state, action) {\n      state.loading = false;\n      state.error = action.payload;\n      state.data = undefined;\n    },\n    clearData: function clearData() {\n      return {\n        loading: false,\n        data: undefined,\n        error: undefined,\n        species: {\n          loading: false,\n          error: undefined,\n          data: undefined\n        }\n      };\n    },\n    fetchSpecies: function fetchSpecies(state, action) {\n      state.species = {\n        loading: true,\n        error: undefined,\n        data: undefined\n      };\n    },\n    speciesFetched: function speciesFetched(state, action) {\n      state.species = {\n        loading: false,\n        error: undefined,\n        data: action.payload\n      };\n    },\n    setSpeciesError: function setSpeciesError(state, action) {\n      state.species = {\n        loading: false,\n        error: action.payload,\n        data: undefined\n      };\n    }\n  }\n});","map":{"version":3,"sources":["/home/dcestari/Documents/projects/react/react-pokeapi/src/redux/pokemonData/slice.ts"],"names":["createSlice","name","initialState","loading","error","undefined","data","species","reducers","fetchData","state","action","dataFetched","payload","setError","clearData","fetchSpecies","speciesFetched","setSpeciesError"],"mappings":"AAAA,SAASA,WAAT,QAA2C,kBAA3C;AAQA,eAAeA,WAAW,CAAC;AACzBC,EAAAA,IAAI,EAAE,aADmB;AAEzBC,EAAAA,YAAY,EAAE;AACZC,IAAAA,OAAO,EAAE,KADG;AAEZC,IAAAA,KAAK,EAAEC,SAFK;AAGZC,IAAAA,IAAI,EAAED,SAHM;AAIZE,IAAAA,OAAO,EAAE;AACPJ,MAAAA,OAAO,EAAE,KADF;AAEPC,MAAAA,KAAK,EAAEC,SAFA;AAGPC,MAAAA,IAAI,EAAED;AAHC;AAJG,GAFW;AAYzBG,EAAAA,QAAQ,EAAE;AACRC,IAAAA,SAAS,EAAE,mBAACC,KAAD,EAAQC,MAAR;AAAA,aAAuE;AAChFR,QAAAA,OAAO,EAAE,IADuE;AAEhFC,QAAAA,KAAK,EAAEC,SAFyE;AAGhFC,QAAAA,IAAI,EAAED,SAH0E;AAIhFE,QAAAA,OAAO,EAAE;AACPJ,UAAAA,OAAO,EAAE,KADF;AAEPC,UAAAA,KAAK,EAAEC,SAFA;AAGPC,UAAAA,IAAI,EAAED;AAHC;AAJuE,OAAvE;AAAA,KADH;AAWRO,IAAAA,WAAW,EAAE,qBAACF,KAAD,EAAQC,MAAR,EAA4C;AACvDD,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,KAAN,GAAcC,SAAd;AACAK,MAAAA,KAAK,CAACJ,IAAN,GAAaK,MAAM,CAACE,OAApB;AACD,KAfO;AAgBRC,IAAAA,QAAQ,EAAE,kBAACJ,KAAD,EAAQC,MAAR,EAA0C;AAClDD,MAAAA,KAAK,CAACP,OAAN,GAAgB,KAAhB;AACAO,MAAAA,KAAK,CAACN,KAAN,GAAcO,MAAM,CAACE,OAArB;AACAH,MAAAA,KAAK,CAACJ,IAAN,GAAaD,SAAb;AACD,KApBO;AAqBRU,IAAAA,SAAS,EAAE;AAAA,aAAO;AAChBZ,QAAAA,OAAO,EAAE,KADO;AAEhBG,QAAAA,IAAI,EAAED,SAFU;AAGhBD,QAAAA,KAAK,EAAEC,SAHS;AAIhBE,QAAAA,OAAO,EAAE;AACPJ,UAAAA,OAAO,EAAE,KADF;AAEPC,UAAAA,KAAK,EAAEC,SAFA;AAGPC,UAAAA,IAAI,EAAED;AAHC;AAJO,OAAP;AAAA,KArBH;AA+BRW,IAAAA,YAAY,EAAE,sBAACN,KAAD,EAAQC,MAAR,EAA0C;AACtDD,MAAAA,KAAK,CAACH,OAAN,GAAgB;AACdJ,QAAAA,OAAO,EAAE,IADK;AAEdC,QAAAA,KAAK,EAAEC,SAFO;AAGdC,QAAAA,IAAI,EAAED;AAHQ,OAAhB;AAKD,KArCO;AAsCRY,IAAAA,cAAc,EAAE,wBAACP,KAAD,EAAQC,MAAR,EAAmD;AACjED,MAAAA,KAAK,CAACH,OAAN,GAAgB;AACdJ,QAAAA,OAAO,EAAE,KADK;AAEdC,QAAAA,KAAK,EAAEC,SAFO;AAGdC,QAAAA,IAAI,EAAEK,MAAM,CAACE;AAHC,OAAhB;AAKD,KA5CO;AA6CRK,IAAAA,eAAe,EAAE,yBAACR,KAAD,EAAQC,MAAR,EAA0C;AACzDD,MAAAA,KAAK,CAACH,OAAN,GAAgB;AACdJ,QAAAA,OAAO,EAAE,KADK;AAEdC,QAAAA,KAAK,EAAEO,MAAM,CAACE,OAFA;AAGdP,QAAAA,IAAI,EAAED;AAHQ,OAAhB;AAKD;AAnDO;AAZe,CAAD,CAA1B","sourcesContent":["import { createSlice, PayloadAction } from \"@reduxjs/toolkit\";\nimport { IPokemon, IPokemonSpecies } from \"pokeapi-typescript\";\nimport { LoadableResource } from \"../types\";\n\ntype State = LoadableResource<IPokemon> & {\n  species: LoadableResource<IPokemonSpecies>;\n};\n\nexport default createSlice({\n  name: \"pokemonData\",\n  initialState: {\n    loading: false,\n    error: undefined,\n    data: undefined,\n    species: {\n      loading: false,\n      error: undefined,\n      data: undefined\n    }\n  } as State,\n  reducers: {\n    fetchData: (state, action: PayloadAction<{ url: string } | { name: string }>) => ({\n      loading: true,\n      error: undefined,\n      data: undefined,\n      species: {\n        loading: false,\n        error: undefined,\n        data: undefined\n      }\n    }),\n    dataFetched: (state, action: PayloadAction<IPokemon>) => {\n      state.loading = false;\n      state.error = undefined;\n      state.data = action.payload;\n    },\n    setError: (state, action: PayloadAction<string>) => {\n      state.loading = false;\n      state.error = action.payload;\n      state.data = undefined;\n    },\n    clearData: () => ({\n      loading: false,\n      data: undefined,\n      error: undefined,\n      species: {\n        loading: false,\n        error: undefined,\n        data: undefined\n      }\n    }),\n    fetchSpecies: (state, action: PayloadAction<string>) => {\n      state.species = {\n        loading: true,\n        error: undefined,\n        data: undefined\n      };\n    },\n    speciesFetched: (state, action: PayloadAction<IPokemonSpecies>) => {\n      state.species = {\n        loading: false,\n        error: undefined,\n        data: action.payload\n      };\n    },\n    setSpeciesError: (state, action: PayloadAction<string>) => {\n      state.species = {\n        loading: false,\n        error: action.payload,\n        data: undefined\n      };\n    }\n  }\n});\n"]},"metadata":{},"sourceType":"module"}