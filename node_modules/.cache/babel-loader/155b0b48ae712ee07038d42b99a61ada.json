{"ast":null,"code":"import createNextState, { isDraft, enableES5 } from 'immer';\nexport { default as createNextState } from 'immer';\nimport { compose, combineReducers, applyMiddleware, createStore } from 'redux';\nexport * from 'redux';\nimport { createSelector } from 'reselect';\nexport { createSelector } from 'reselect';\nimport thunkMiddleware from 'redux-thunk';\n\nfunction _extends() {\n  _extends = Object.assign || function (target) {\n    for (var i = 1; i < arguments.length; i++) {\n      var source = arguments[i];\n\n      for (var key in source) {\n        if (Object.prototype.hasOwnProperty.call(source, key)) {\n          target[key] = source[key];\n        }\n      }\n    }\n\n    return target;\n  };\n\n  return _extends.apply(this, arguments);\n}\n/**\r\n * @public\r\n */\n\n\nvar composeWithDevTools = typeof window !== 'undefined' && window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ ? window.__REDUX_DEVTOOLS_EXTENSION_COMPOSE__ : function () {\n  if (arguments.length === 0) return undefined;\n  if (typeof arguments[0] === 'object') return compose;\n  return compose.apply(null, arguments);\n};\n/**\r\n * Returns true if the passed value is \"plain\" object, i.e. an object whose\r\n * protoype is the root `Object.prototype`. This includes objects created\r\n * using object literals, but not for instance for class instances.\r\n *\r\n * @param {any} value The value to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\n\nfunction isPlainObject(value) {\n  if (typeof value !== 'object' || value === null) return false;\n  var proto = value;\n\n  while (Object.getPrototypeOf(proto) !== null) {\n    proto = Object.getPrototypeOf(proto);\n  }\n\n  return Object.getPrototypeOf(value) === proto;\n}\n\nfunction getTimeMeasureUtils(maxDelay, fnName) {\n  var elapsed = 0;\n  return {\n    measureTime: function measureTime(fn) {\n      var started = Date.now();\n\n      try {\n        return fn();\n      } finally {\n        var finished = Date.now();\n        elapsed += finished - started;\n      }\n    },\n    warnIfExceeded: function warnIfExceeded() {\n      if (elapsed > maxDelay) {\n        console.warn(fnName + \" took \" + elapsed + \"ms, which is more than the warning threshold of \" + maxDelay + \"ms. \\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\\nIt is disabled in production builds, so you don't need to worry about that.\");\n      }\n    }\n  };\n}\n\nvar isProduction = process.env.NODE_ENV === 'production';\nvar prefix = 'Invariant failed'; // Throw an error if the condition fails\n// Strip out error messages for production\n// > Not providing an inline default argument for message as the result is smaller\n\nfunction invariant(condition, message) {\n  if (condition) {\n    return;\n  } // Condition not passed\n  // In production we strip the message but still throw\n\n\n  if (isProduction) {\n    throw new Error(prefix);\n  } // When not in production we allow the message to pass through\n  // *This block will be removed in production builds*\n\n\n  throw new Error(prefix + \": \" + (message || ''));\n}\n\nfunction stringify(obj, serializer, indent, decycler) {\n  return JSON.stringify(obj, getSerialize(serializer, decycler), indent);\n}\n\nfunction getSerialize(serializer, decycler) {\n  var stack = [],\n      keys = [];\n  if (!decycler) decycler = function decycler(_, value) {\n    if (stack[0] === value) return '[Circular ~]';\n    return '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']';\n  };\n  return function (key, value) {\n    if (stack.length > 0) {\n      var thisPos = stack.indexOf(this);\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this);\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key);\n      if (~stack.indexOf(value)) value = decycler.call(this, key, value);\n    } else stack.push(value);\n\n    return serializer == null ? value : serializer.call(this, key, value);\n  };\n}\n/**\r\n * The default `isImmutable` function.\r\n *\r\n * @public\r\n */\n\n\nfunction isImmutableDefault(value) {\n  return typeof value !== 'object' || value === null || typeof value === 'undefined';\n}\n\nfunction trackForMutations(isImmutable, ignorePaths, obj) {\n  var trackedProperties = trackProperties(isImmutable, ignorePaths, obj);\n  return {\n    detectMutations: function detectMutations() {\n      return _detectMutations(isImmutable, ignorePaths, trackedProperties, obj);\n    }\n  };\n}\n\nfunction trackProperties(isImmutable, ignorePaths, obj, path) {\n  if (ignorePaths === void 0) {\n    ignorePaths = [];\n  }\n\n  if (path === void 0) {\n    path = [];\n  }\n\n  var tracked = {\n    value: obj\n  };\n\n  if (!isImmutable(obj)) {\n    tracked.children = {};\n\n    for (var key in obj) {\n      var childPath = path.concat(key);\n\n      if (ignorePaths.length && ignorePaths.indexOf(childPath.join('.')) !== -1) {\n        continue;\n      }\n\n      tracked.children[key] = trackProperties(isImmutable, ignorePaths, obj[key], childPath);\n    }\n  }\n\n  return tracked;\n}\n\nfunction _detectMutations(isImmutable, ignorePaths, trackedProperty, obj, sameParentRef, path) {\n  if (ignorePaths === void 0) {\n    ignorePaths = [];\n  }\n\n  if (sameParentRef === void 0) {\n    sameParentRef = false;\n  }\n\n  if (path === void 0) {\n    path = [];\n  }\n\n  var prevObj = trackedProperty ? trackedProperty.value : undefined;\n  var sameRef = prevObj === obj;\n\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\n    return {\n      wasMutated: true,\n      path: path\n    };\n  }\n\n  if (isImmutable(prevObj) || isImmutable(obj)) {\n    return {\n      wasMutated: false\n    };\n  } // Gather all keys from prev (tracked) and after objs\n\n\n  var keysToDetect = {};\n  Object.keys(trackedProperty.children).forEach(function (key) {\n    keysToDetect[key] = true;\n  });\n  Object.keys(obj).forEach(function (key) {\n    keysToDetect[key] = true;\n  });\n  var keys = Object.keys(keysToDetect);\n\n  for (var i = 0; i < keys.length; i++) {\n    var key = keys[i];\n    var childPath = path.concat(key);\n\n    if (ignorePaths.length && ignorePaths.indexOf(childPath.join('.')) !== -1) {\n      continue;\n    }\n\n    var result = _detectMutations(isImmutable, ignorePaths, trackedProperty.children[key], obj[key], sameRef, childPath);\n\n    if (result.wasMutated) {\n      return result;\n    }\n  }\n\n  return {\n    wasMutated: false\n  };\n}\n/**\r\n * Creates a middleware that checks whether any state was mutated in between\r\n * dispatches or during a dispatch. If any mutations are detected, an error is\r\n * thrown.\r\n *\r\n * @param options Middleware options.\r\n *\r\n * @public\r\n */\n\n\nfunction createImmutableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (process.env.NODE_ENV === 'production') {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n\n  var _options = options,\n      _options$isImmutable = _options.isImmutable,\n      isImmutable = _options$isImmutable === void 0 ? isImmutableDefault : _options$isImmutable,\n      ignoredPaths = _options.ignoredPaths,\n      _options$warnAfter = _options.warnAfter,\n      warnAfter = _options$warnAfter === void 0 ? 32 : _options$warnAfter,\n      ignore = _options.ignore; // Alias ignore->ignoredPaths, but prefer ignoredPaths if present\n\n  ignoredPaths = ignoredPaths || ignore;\n  var track = trackForMutations.bind(null, isImmutable, ignoredPaths);\n  return function (_ref) {\n    var getState = _ref.getState;\n    var state = getState();\n    var tracker = track(state);\n    var result;\n    return function (next) {\n      return function (action) {\n        var measureUtils = getTimeMeasureUtils(warnAfter, 'ImmutableStateInvariantMiddleware');\n        measureUtils.measureTime(function () {\n          state = getState();\n          result = tracker.detectMutations(); // Track before potentially not meeting the invariant\n\n          tracker = track(state);\n          !!result.wasMutated ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"A state mutation was detected between dispatches, in the path '\" + (result.path || []).join('.') + \"'.  This may cause incorrect behavior. (http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments)\") : invariant(false) : void 0;\n        });\n        var dispatchedAction = next(action);\n        measureUtils.measureTime(function () {\n          state = getState();\n          result = tracker.detectMutations(); // Track before potentially not meeting the invariant\n\n          tracker = track(state);\n          result.wasMutated && (!!result.wasMutated ? process.env.NODE_ENV !== \"production\" ? invariant(false, \"A state mutation was detected inside a dispatch, in the path: \" + (result.path || []).join('.') + \". Take a look at the reducer(s) handling the action \" + stringify(action) + \". (http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments)\") : invariant(false) : void 0);\n        });\n        measureUtils.warnIfExceeded();\n        return dispatchedAction;\n      };\n    };\n  };\n}\n/**\r\n * Returns true if the passed value is \"plain\", i.e. a value that is either\r\n * directly JSON-serializable (boolean, number, string, array, plain object)\r\n * or `undefined`.\r\n *\r\n * @param val The value to check.\r\n *\r\n * @public\r\n */\n\n\nfunction isPlain(val) {\n  return typeof val === 'undefined' || val === null || typeof val === 'string' || typeof val === 'boolean' || typeof val === 'number' || Array.isArray(val) || isPlainObject(val);\n}\n/**\r\n * @public\r\n */\n\n\nfunction findNonSerializableValue(value, path, isSerializable, getEntries, ignoredPaths) {\n  if (path === void 0) {\n    path = [];\n  }\n\n  if (isSerializable === void 0) {\n    isSerializable = isPlain;\n  }\n\n  if (ignoredPaths === void 0) {\n    ignoredPaths = [];\n  }\n\n  var foundNestedSerializable;\n\n  if (!isSerializable(value)) {\n    return {\n      keyPath: path.join('.') || '<root>',\n      value: value\n    };\n  }\n\n  if (typeof value !== 'object' || value === null) {\n    return false;\n  }\n\n  var entries = getEntries != null ? getEntries(value) : Object.entries(value);\n  var hasIgnoredPaths = ignoredPaths.length > 0;\n\n  for (var _iterator = entries, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n    var _ref;\n\n    if (_isArray) {\n      if (_i >= _iterator.length) break;\n      _ref = _iterator[_i++];\n    } else {\n      _i = _iterator.next();\n      if (_i.done) break;\n      _ref = _i.value;\n    }\n\n    var _ref2 = _ref,\n        property = _ref2[0],\n        nestedValue = _ref2[1];\n    var nestedPath = path.concat(property);\n\n    if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath.join('.')) >= 0) {\n      continue;\n    }\n\n    if (!isSerializable(nestedValue)) {\n      return {\n        keyPath: nestedPath.join('.'),\n        value: nestedValue\n      };\n    }\n\n    if (typeof nestedValue === 'object') {\n      foundNestedSerializable = findNonSerializableValue(nestedValue, nestedPath, isSerializable, getEntries, ignoredPaths);\n\n      if (foundNestedSerializable) {\n        return foundNestedSerializable;\n      }\n    }\n  }\n\n  return false;\n}\n/**\r\n * Creates a middleware that, after every state change, checks if the new\r\n * state is serializable. If a non-serializable value is found within the\r\n * state, an error is printed to the console.\r\n *\r\n * @param options Middleware options.\r\n *\r\n * @public\r\n */\n\n\nfunction createSerializableStateInvariantMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  if (process.env.NODE_ENV === 'production') {\n    return function () {\n      return function (next) {\n        return function (action) {\n          return next(action);\n        };\n      };\n    };\n  }\n\n  var _options = options,\n      _options$isSerializab = _options.isSerializable,\n      isSerializable = _options$isSerializab === void 0 ? isPlain : _options$isSerializab,\n      getEntries = _options.getEntries,\n      _options$ignoredActio = _options.ignoredActions,\n      ignoredActions = _options$ignoredActio === void 0 ? [] : _options$ignoredActio,\n      _options$ignoredActio2 = _options.ignoredActionPaths,\n      ignoredActionPaths = _options$ignoredActio2 === void 0 ? ['meta.arg'] : _options$ignoredActio2,\n      _options$ignoredPaths = _options.ignoredPaths,\n      ignoredPaths = _options$ignoredPaths === void 0 ? [] : _options$ignoredPaths,\n      _options$warnAfter = _options.warnAfter,\n      warnAfter = _options$warnAfter === void 0 ? 32 : _options$warnAfter;\n  return function (storeAPI) {\n    return function (next) {\n      return function (action) {\n        if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {\n          return next(action);\n        }\n\n        var measureUtils = getTimeMeasureUtils(warnAfter, 'SerializableStateInvariantMiddleware');\n        measureUtils.measureTime(function () {\n          var foundActionNonSerializableValue = findNonSerializableValue(action, [], isSerializable, getEntries, ignoredActionPaths);\n\n          if (foundActionNonSerializableValue) {\n            var keyPath = foundActionNonSerializableValue.keyPath,\n                value = foundActionNonSerializableValue.value;\n            console.error(\"A non-serializable value was detected in an action, in the path: `\" + keyPath + \"`. Value:\", value, '\\nTake a look at the logic that dispatched this action: ', action, '\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)');\n          }\n        });\n        var result = next(action);\n        measureUtils.measureTime(function () {\n          var state = storeAPI.getState();\n          var foundStateNonSerializableValue = findNonSerializableValue(state, [], isSerializable, getEntries, ignoredPaths);\n\n          if (foundStateNonSerializableValue) {\n            var keyPath = foundStateNonSerializableValue.keyPath,\n                value = foundStateNonSerializableValue.value;\n            console.error(\"A non-serializable value was detected in the state, in the path: `\" + keyPath + \"`. Value:\", value, \"\\nTake a look at the reducer(s) handling this action type: \" + action.type + \".\\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)\");\n          }\n        });\n        measureUtils.warnIfExceeded();\n        return result;\n      };\n    };\n  };\n}\n\nfunction isBoolean(x) {\n  return typeof x === 'boolean';\n}\n/**\r\n * Returns any array containing the default middleware installed by\r\n * `configureStore()`. Useful if you want to configure your store with a custom\r\n * `middleware` array but still keep the default set.\r\n *\r\n * @return The default middleware used by `configureStore()`.\r\n *\r\n * @public\r\n */\n\n\nfunction getDefaultMiddleware(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _options = options,\n      _options$thunk = _options.thunk,\n      thunk = _options$thunk === void 0 ? true : _options$thunk,\n      _options$immutableChe = _options.immutableCheck,\n      immutableCheck = _options$immutableChe === void 0 ? true : _options$immutableChe,\n      _options$serializable = _options.serializableCheck,\n      serializableCheck = _options$serializable === void 0 ? true : _options$serializable;\n  var middlewareArray = [];\n\n  if (thunk) {\n    if (isBoolean(thunk)) {\n      middlewareArray.push(thunkMiddleware);\n    } else {\n      middlewareArray.push(thunkMiddleware.withExtraArgument(thunk.extraArgument));\n    }\n  }\n\n  if (process.env.NODE_ENV !== 'production') {\n    if (immutableCheck) {\n      /* PROD_START_REMOVE_UMD */\n      var immutableOptions = {};\n\n      if (!isBoolean(immutableCheck)) {\n        immutableOptions = immutableCheck;\n      }\n\n      middlewareArray.unshift(createImmutableStateInvariantMiddleware(immutableOptions));\n      /* PROD_STOP_REMOVE_UMD */\n    }\n\n    if (serializableCheck) {\n      var serializableOptions = {};\n\n      if (!isBoolean(serializableCheck)) {\n        serializableOptions = serializableCheck;\n      }\n\n      middlewareArray.push(createSerializableStateInvariantMiddleware(serializableOptions));\n    }\n  }\n\n  return middlewareArray;\n}\n\nvar IS_PRODUCTION = process.env.NODE_ENV === 'production';\n/**\r\n * A friendly abstraction over the standard Redux `createStore()` function.\r\n *\r\n * @param config The store configuration.\r\n * @returns A configured Redux store.\r\n *\r\n * @public\r\n */\n\nfunction configureStore(options) {\n  var _ref = options || {},\n      _ref$reducer = _ref.reducer,\n      reducer = _ref$reducer === void 0 ? undefined : _ref$reducer,\n      _ref$middleware = _ref.middleware,\n      middleware = _ref$middleware === void 0 ? getDefaultMiddleware() : _ref$middleware,\n      _ref$devTools = _ref.devTools,\n      devTools = _ref$devTools === void 0 ? true : _ref$devTools,\n      _ref$preloadedState = _ref.preloadedState,\n      preloadedState = _ref$preloadedState === void 0 ? undefined : _ref$preloadedState,\n      _ref$enhancers = _ref.enhancers,\n      enhancers = _ref$enhancers === void 0 ? undefined : _ref$enhancers;\n\n  var rootReducer;\n\n  if (typeof reducer === 'function') {\n    rootReducer = reducer;\n  } else if (isPlainObject(reducer)) {\n    rootReducer = combineReducers(reducer);\n  } else {\n    throw new Error('\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers');\n  }\n\n  var middlewareEnhancer = applyMiddleware.apply(void 0, middleware);\n  var finalCompose = compose;\n\n  if (devTools) {\n    finalCompose = composeWithDevTools(_extends({\n      // Enable capture of stack traces for dispatched Redux actions\n      trace: !IS_PRODUCTION\n    }, typeof devTools === 'object' && devTools));\n  }\n\n  var storeEnhancers = [middlewareEnhancer];\n\n  if (Array.isArray(enhancers)) {\n    storeEnhancers = [middlewareEnhancer].concat(enhancers);\n  } else if (typeof enhancers === 'function') {\n    storeEnhancers = enhancers(storeEnhancers);\n  }\n\n  var composedEnhancer = finalCompose.apply(void 0, storeEnhancers);\n  return createStore(rootReducer, preloadedState, composedEnhancer);\n}\n\nfunction createAction(type, prepareAction) {\n  function actionCreator() {\n    if (prepareAction) {\n      var prepared = prepareAction.apply(void 0, arguments);\n\n      if (!prepared) {\n        throw new Error('prepareAction did not return an object');\n      }\n\n      return _extends({\n        type: type,\n        payload: prepared.payload\n      }, 'meta' in prepared && {\n        meta: prepared.meta\n      }, {}, 'error' in prepared && {\n        error: prepared.error\n      });\n    }\n\n    return {\n      type: type,\n      payload: arguments.length <= 0 ? undefined : arguments[0]\n    };\n  }\n\n  actionCreator.toString = function () {\n    return \"\" + type;\n  };\n\n  actionCreator.type = type;\n\n  actionCreator.match = function (action) {\n    return action.type === type;\n  };\n\n  return actionCreator;\n}\n\nfunction isFSA(action) {\n  return isPlainObject(action) && typeof action.type === 'string' && Object.keys(action).every(isValidKey);\n}\n\nfunction isValidKey(key) {\n  return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1;\n}\n/**\r\n * Returns the action type of the actions created by the passed\r\n * `createAction()`-generated action creator (arbitrary action creators\r\n * are not supported).\r\n *\r\n * @param action The action creator whose action type to get.\r\n * @returns The action type used by the action creator.\r\n *\r\n * @public\r\n */\n\n\nfunction getType(actionCreator) {\n  return \"\" + actionCreator;\n}\n\nfunction executeReducerBuilderCallback(builderCallback) {\n  var actionsMap = {};\n  var builder = {\n    addCase: function addCase(typeOrActionCreator, reducer) {\n      var type = typeof typeOrActionCreator === 'string' ? typeOrActionCreator : typeOrActionCreator.type;\n\n      if (type in actionsMap) {\n        throw new Error('addCase cannot be called with two reducers for the same action type');\n      }\n\n      actionsMap[type] = reducer;\n      return builder;\n    }\n  };\n  builderCallback(builder);\n  return actionsMap;\n}\n\nfunction createReducer(initialState, mapOrBuilderCallback) {\n  var actionsMap = typeof mapOrBuilderCallback === 'function' ? executeReducerBuilderCallback(mapOrBuilderCallback) : mapOrBuilderCallback;\n  return function (state, action) {\n    if (state === void 0) {\n      state = initialState;\n    }\n\n    var caseReducer = actionsMap[action.type];\n\n    if (caseReducer) {\n      if (isDraft(state)) {\n        // we must already be inside a `createNextState` call, likely because\n        // this is being wrapped in `createReducer`, `createSlice`, or nested\n        // inside an existing draft. It's safe to just pass the draft to the mutator.\n        var draft = state; // We can aassume this is already a draft\n\n        return caseReducer(draft, action) || state;\n      } else {\n        // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\n        // than an Immutable<S>, and TypeScript cannot find out how to reconcile\n        // these two types.\n        return createNextState(state, function (draft) {\n          return caseReducer(draft, action);\n        });\n      }\n    }\n\n    return state;\n  };\n}\n\nfunction getType$1(slice, actionKey) {\n  return slice + \"/\" + actionKey;\n}\n/**\r\n * A function that accepts an initial state, an object full of reducer\r\n * functions, and a \"slice name\", and automatically generates\r\n * action creators and action types that correspond to the\r\n * reducers and state.\r\n *\r\n * The `reducer` argument is passed to `createReducer()`.\r\n *\r\n * @public\r\n */\n\n\nfunction createSlice(options) {\n  var name = options.name,\n      initialState = options.initialState;\n\n  if (!name) {\n    throw new Error('`name` is a required option for createSlice');\n  }\n\n  var reducers = options.reducers || {};\n  var extraReducers = typeof options.extraReducers === 'undefined' ? {} : typeof options.extraReducers === 'function' ? executeReducerBuilderCallback(options.extraReducers) : options.extraReducers;\n  var reducerNames = Object.keys(reducers);\n  var sliceCaseReducersByName = {};\n  var sliceCaseReducersByType = {};\n  var actionCreators = {};\n  reducerNames.forEach(function (reducerName) {\n    var maybeReducerWithPrepare = reducers[reducerName];\n    var type = getType$1(name, reducerName);\n    var caseReducer;\n    var prepareCallback;\n\n    if ('reducer' in maybeReducerWithPrepare) {\n      caseReducer = maybeReducerWithPrepare.reducer;\n      prepareCallback = maybeReducerWithPrepare.prepare;\n    } else {\n      caseReducer = maybeReducerWithPrepare;\n    }\n\n    sliceCaseReducersByName[reducerName] = caseReducer;\n    sliceCaseReducersByType[type] = caseReducer;\n    actionCreators[reducerName] = prepareCallback ? createAction(type, prepareCallback) : createAction(type);\n  });\n\n  var finalCaseReducers = _extends({}, extraReducers, {}, sliceCaseReducersByType);\n\n  var reducer = createReducer(initialState, finalCaseReducers);\n  return {\n    name: name,\n    reducer: reducer,\n    actions: actionCreators,\n    caseReducers: sliceCaseReducersByName\n  };\n}\n\nfunction getInitialEntityState() {\n  return {\n    ids: [],\n    entities: {}\n  };\n}\n\nfunction createInitialStateFactory() {\n  function getInitialState(additionalState) {\n    if (additionalState === void 0) {\n      additionalState = {};\n    }\n\n    return Object.assign(getInitialEntityState(), additionalState);\n  }\n\n  return {\n    getInitialState: getInitialState\n  };\n}\n\nfunction createSelectorsFactory() {\n  function getSelectors(selectState) {\n    var selectIds = function selectIds(state) {\n      return state.ids;\n    };\n\n    var selectEntities = function selectEntities(state) {\n      return state.entities;\n    };\n\n    var selectAll = createSelector(selectIds, selectEntities, function (ids, entities) {\n      return ids.map(function (id) {\n        return entities[id];\n      });\n    });\n\n    var selectId = function selectId(_, id) {\n      return id;\n    };\n\n    var selectById = function selectById(entities, id) {\n      return entities[id];\n    };\n\n    var selectTotal = createSelector(selectIds, function (ids) {\n      return ids.length;\n    });\n\n    if (!selectState) {\n      return {\n        selectIds: selectIds,\n        selectEntities: selectEntities,\n        selectAll: selectAll,\n        selectTotal: selectTotal,\n        selectById: createSelector(selectEntities, selectId, selectById)\n      };\n    }\n\n    var selectGlobalizedEntities = createSelector(selectState, selectEntities);\n    return {\n      selectIds: createSelector(selectState, selectIds),\n      selectEntities: selectGlobalizedEntities,\n      selectAll: createSelector(selectState, selectAll),\n      selectTotal: createSelector(selectState, selectTotal),\n      selectById: createSelector(selectGlobalizedEntities, selectId, selectById)\n    };\n  }\n\n  return {\n    getSelectors: getSelectors\n  };\n}\n\nfunction createSingleArgumentStateOperator(mutator) {\n  var operator = createStateOperator(function (_, state) {\n    return mutator(state);\n  });\n  return function operation(state) {\n    return operator(state, undefined);\n  };\n}\n\nfunction createStateOperator(mutator) {\n  return function operation(state, arg) {\n    function isPayloadActionArgument(arg) {\n      return isFSA(arg);\n    }\n\n    var runMutator = function runMutator(draft) {\n      if (isPayloadActionArgument(arg)) {\n        mutator(arg.payload, draft);\n      } else {\n        mutator(arg, draft);\n      }\n    };\n\n    if (isDraft(state)) {\n      // we must already be inside a `createNextState` call, likely because\n      // this is being wrapped in `createReducer` or `createSlice`.\n      // It's safe to just pass the draft to the mutator.\n      runMutator(state); // since it's a draft, we'll just return it\n\n      return state;\n    } else {\n      // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\n      // than an Immutable<S>, and TypeScript cannot find out how to reconcile\n      // these two types.\n      return createNextState(state, runMutator);\n    }\n  };\n}\n\nfunction selectIdValue(entity, selectId) {\n  var key = selectId(entity);\n\n  if (process.env.NODE_ENV !== 'production' && key === undefined) {\n    console.warn('The entity passed to the `selectId` implementation returned undefined.', 'You should probably provide your own `selectId` implementation.', 'The entity that was passed:', entity, 'The `selectId` implementation:', selectId.toString());\n  }\n\n  return key;\n}\n\nfunction createUnsortedStateAdapter(selectId) {\n  function addOneMutably(entity, state) {\n    var key = selectIdValue(entity, selectId);\n\n    if (key in state.entities) {\n      return;\n    }\n\n    state.ids.push(key);\n    state.entities[key] = entity;\n  }\n\n  function addManyMutably(entities, state) {\n    if (!Array.isArray(entities)) {\n      entities = Object.values(entities);\n    }\n\n    for (var _iterator = entities, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var entity = _ref;\n      addOneMutably(entity, state);\n    }\n  }\n\n  function setAllMutably(entities, state) {\n    if (!Array.isArray(entities)) {\n      entities = Object.values(entities);\n    }\n\n    state.ids = [];\n    state.entities = {};\n    addManyMutably(entities, state);\n  }\n\n  function removeOneMutably(key, state) {\n    return removeManyMutably([key], state);\n  }\n\n  function removeManyMutably(keys, state) {\n    var didMutate = false;\n    keys.forEach(function (key) {\n      if (key in state.entities) {\n        delete state.entities[key];\n        didMutate = true;\n      }\n    });\n\n    if (didMutate) {\n      state.ids = state.ids.filter(function (id) {\n        return id in state.entities;\n      });\n    }\n  }\n\n  function removeAllMutably(state) {\n    Object.assign(state, {\n      ids: [],\n      entities: {}\n    });\n  }\n\n  function takeNewKey(keys, update, state) {\n    var original = state.entities[update.id];\n    var updated = Object.assign({}, original, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    var hasNewKey = newKey !== update.id;\n\n    if (hasNewKey) {\n      keys[update.id] = newKey;\n      delete state.entities[update.id];\n    }\n\n    state.entities[newKey] = updated;\n    return hasNewKey;\n  }\n\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n\n  function updateManyMutably(updates, state) {\n    var newKeys = {};\n    var updatesPerEntity = {};\n    updates.forEach(function (update) {\n      // Only apply updates to entities that currently exist\n      if (update.id in state.entities) {\n        // If there are multiple updates to one entity, merge them together\n        updatesPerEntity[update.id] = _extends({}, updatesPerEntity[update.id], {}, update);\n      }\n    });\n    updates = Object.values(updatesPerEntity);\n    var didMutateEntities = updates.length > 0;\n\n    if (didMutateEntities) {\n      var didMutateIds = updates.filter(function (update) {\n        return takeNewKey(newKeys, update, state);\n      }).length > 0;\n\n      if (didMutateIds) {\n        state.ids = state.ids.map(function (id) {\n          return newKeys[id] || id;\n        });\n      }\n    }\n  }\n\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities, state) {\n    if (!Array.isArray(entities)) {\n      entities = Object.values(entities);\n    }\n\n    var added = [];\n    var updated = [];\n\n    for (var _iterator2 = entities, _isArray2 = Array.isArray(_iterator2), _i2 = 0, _iterator2 = _isArray2 ? _iterator2 : _iterator2[Symbol.iterator]();;) {\n      var _ref2;\n\n      if (_isArray2) {\n        if (_i2 >= _iterator2.length) break;\n        _ref2 = _iterator2[_i2++];\n      } else {\n        _i2 = _iterator2.next();\n        if (_i2.done) break;\n        _ref2 = _i2.value;\n      }\n\n      var entity = _ref2;\n      var id = selectIdValue(entity, selectId);\n\n      if (id in state.entities) {\n        updated.push({\n          id: id,\n          changes: entity\n        });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n\n  return {\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\n    addOne: createStateOperator(addOneMutably),\n    addMany: createStateOperator(addManyMutably),\n    setAll: createStateOperator(setAllMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    upsertMany: createStateOperator(upsertManyMutably),\n    removeOne: createStateOperator(removeOneMutably),\n    removeMany: createStateOperator(removeManyMutably)\n  };\n}\n\nfunction createSortedStateAdapter(selectId, sort) {\n  var _createUnsortedStateA = createUnsortedStateAdapter(selectId),\n      removeOne = _createUnsortedStateA.removeOne,\n      removeMany = _createUnsortedStateA.removeMany,\n      removeAll = _createUnsortedStateA.removeAll;\n\n  function addOneMutably(entity, state) {\n    return addManyMutably([entity], state);\n  }\n\n  function addManyMutably(newModels, state) {\n    if (!Array.isArray(newModels)) {\n      newModels = Object.values(newModels);\n    }\n\n    var models = newModels.filter(function (model) {\n      return !(selectIdValue(model, selectId) in state.entities);\n    });\n\n    if (models.length !== 0) {\n      merge(models, state);\n    }\n  }\n\n  function setAllMutably(models, state) {\n    if (!Array.isArray(models)) {\n      models = Object.values(models);\n    }\n\n    state.entities = {};\n    state.ids = [];\n    addManyMutably(models, state);\n  }\n\n  function updateOneMutably(update, state) {\n    return updateManyMutably([update], state);\n  }\n\n  function takeUpdatedModel(models, update, state) {\n    if (!(update.id in state.entities)) {\n      return false;\n    }\n\n    var original = state.entities[update.id];\n    var updated = Object.assign({}, original, update.changes);\n    var newKey = selectIdValue(updated, selectId);\n    delete state.entities[update.id];\n    models.push(updated);\n    return newKey !== update.id;\n  }\n\n  function updateManyMutably(updates, state) {\n    var models = [];\n    updates.forEach(function (update) {\n      return takeUpdatedModel(models, update, state);\n    });\n\n    if (models.length !== 0) {\n      merge(models, state);\n    }\n  }\n\n  function upsertOneMutably(entity, state) {\n    return upsertManyMutably([entity], state);\n  }\n\n  function upsertManyMutably(entities, state) {\n    if (!Array.isArray(entities)) {\n      entities = Object.values(entities);\n    }\n\n    var added = [];\n    var updated = [];\n\n    for (var _iterator = entities, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var entity = _ref;\n      var id = selectIdValue(entity, selectId);\n\n      if (id in state.entities) {\n        updated.push({\n          id: id,\n          changes: entity\n        });\n      } else {\n        added.push(entity);\n      }\n    }\n\n    updateManyMutably(updated, state);\n    addManyMutably(added, state);\n  }\n\n  function areArraysEqual(a, b) {\n    if (a.length !== b.length) {\n      return false;\n    }\n\n    for (var i = 0; i < a.length && i < b.length; i++) {\n      if (a[i] === b[i]) {\n        continue;\n      }\n\n      return false;\n    }\n\n    return true;\n  }\n\n  function merge(models, state) {\n    models.sort(sort); // Insert/overwrite all new/updated\n\n    models.forEach(function (model) {\n      state.entities[selectId(model)] = model;\n    });\n    var allEntities = Object.values(state.entities);\n    allEntities.sort(sort);\n    var newSortedIds = allEntities.map(selectId);\n    var ids = state.ids;\n\n    if (!areArraysEqual(ids, newSortedIds)) {\n      state.ids = newSortedIds;\n    }\n  }\n\n  return {\n    removeOne: removeOne,\n    removeMany: removeMany,\n    removeAll: removeAll,\n    addOne: createStateOperator(addOneMutably),\n    updateOne: createStateOperator(updateOneMutably),\n    upsertOne: createStateOperator(upsertOneMutably),\n    setAll: createStateOperator(setAllMutably),\n    addMany: createStateOperator(addManyMutably),\n    updateMany: createStateOperator(updateManyMutably),\n    upsertMany: createStateOperator(upsertManyMutably)\n  };\n}\n/**\r\n *\r\n * @param options\r\n *\r\n * @public\r\n */\n\n\nfunction createEntityAdapter(options) {\n  if (options === void 0) {\n    options = {};\n  }\n\n  var _sortComparer$selectI = _extends({\n    sortComparer: false,\n    selectId: function selectId(instance) {\n      return instance.id;\n    }\n  }, options),\n      selectId = _sortComparer$selectI.selectId,\n      sortComparer = _sortComparer$selectI.sortComparer;\n\n  var stateFactory = createInitialStateFactory();\n  var selectorsFactory = createSelectorsFactory();\n  var stateAdapter = sortComparer ? createSortedStateAdapter(selectId, sortComparer) : createUnsortedStateAdapter(selectId);\n  return _extends({\n    selectId: selectId,\n    sortComparer: sortComparer\n  }, stateFactory, {}, selectorsFactory, {}, stateAdapter);\n} // A type of promise-like that resolves synchronously and supports only one observer\n\n\nvar _iteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\")) : \"@@iterator\";\n\nvar _asyncIteratorSymbol = /*#__PURE__*/typeof Symbol !== \"undefined\" ? Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\")) : \"@@asyncIterator\"; // Asynchronously call a function and send errors to recovery continuation\n\n\nfunction _catch(body, recover) {\n  try {\n    var result = body();\n  } catch (e) {\n    return recover(e);\n  }\n\n  if (result && result.then) {\n    return result.then(void 0, recover);\n  }\n\n  return result;\n} // Borrowed from https://github.com/ai/nanoid/blob/3.0.2/non-secure/index.js\n// This alphabet uses `A-Za-z0-9_-` symbols. A genetic algorithm helped\n// optimize the gzip compression for this alphabet.\n\n\nvar urlAlphabet = 'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW';\n/**\r\n *\r\n * @public\r\n */\n\nvar nanoid = function nanoid(size) {\n  if (size === void 0) {\n    size = 21;\n  }\n\n  var id = ''; // A compact alternative for `for (var i = 0; i < step; i++)`.\n\n  var i = size;\n\n  while (i--) {\n    // `| 0` is more compact and faster than `Math.floor()`.\n    id += urlAlphabet[Math.random() * 64 | 0];\n  }\n\n  return id;\n};\n\nvar commonProperties = ['name', 'message', 'stack', 'code'];\n\nvar RejectWithValue = function RejectWithValue(value) {\n  this.value = value;\n}; // Reworked from https://github.com/sindresorhus/serialize-error\n\n\nvar miniSerializeError = function miniSerializeError(value) {\n  if (typeof value === 'object' && value !== null) {\n    var simpleError = {};\n\n    for (var _iterator = commonProperties, _isArray = Array.isArray(_iterator), _i = 0, _iterator = _isArray ? _iterator : _iterator[Symbol.iterator]();;) {\n      var _ref;\n\n      if (_isArray) {\n        if (_i >= _iterator.length) break;\n        _ref = _iterator[_i++];\n      } else {\n        _i = _iterator.next();\n        if (_i.done) break;\n        _ref = _i.value;\n      }\n\n      var property = _ref;\n\n      if (typeof value[property] === 'string') {\n        simpleError[property] = value[property];\n      }\n    }\n\n    return simpleError;\n  }\n\n  return {\n    message: String(value)\n  };\n};\n/**\r\n *\r\n * @param typePrefix\r\n * @param payloadCreator\r\n * @param options\r\n *\r\n * @public\r\n */\n\n\nfunction createAsyncThunk(typePrefix, payloadCreator, options) {\n  var fulfilled = createAction(typePrefix + '/fulfilled', function (result, requestId, arg) {\n    return {\n      payload: result,\n      meta: {\n        arg: arg,\n        requestId: requestId\n      }\n    };\n  });\n  var pending = createAction(typePrefix + '/pending', function (requestId, arg) {\n    return {\n      payload: undefined,\n      meta: {\n        arg: arg,\n        requestId: requestId\n      }\n    };\n  });\n  var rejected = createAction(typePrefix + '/rejected', function (error, requestId, arg, payload) {\n    var aborted = !!error && error.name === 'AbortError';\n    var condition = !!error && error.name === 'ConditionError';\n    return {\n      payload: payload,\n      error: miniSerializeError(error || 'Rejected'),\n      meta: {\n        arg: arg,\n        requestId: requestId,\n        aborted: aborted,\n        condition: condition\n      }\n    };\n  });\n  var displayedWarning = false;\n  var AC = typeof AbortController !== 'undefined' ? AbortController : /*#__PURE__*/function () {\n    function _class() {\n      this.signal = {\n        aborted: false,\n        addEventListener: function addEventListener() {},\n        dispatchEvent: function dispatchEvent() {\n          return false;\n        },\n        onabort: function onabort() {},\n        removeEventListener: function removeEventListener() {}\n      };\n    }\n\n    var _proto = _class.prototype;\n\n    _proto.abort = function abort() {\n      if (process.env.NODE_ENV !== 'production') {\n        if (!displayedWarning) {\n          displayedWarning = true;\n          console.info(\"This platform does not implement AbortController. \\nIf you want to use the AbortController to react to `abort` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.\");\n        }\n      }\n    };\n\n    return _class;\n  }();\n\n  function actionCreator(arg) {\n    return function (dispatch, getState, extra) {\n      var requestId = nanoid();\n      var abortController = new AC();\n      var abortReason;\n      var abortedPromise = new Promise(function (_, reject) {\n        return abortController.signal.addEventListener('abort', function () {\n          return reject({\n            name: 'AbortError',\n            message: abortReason || 'Aborted'\n          });\n        });\n      });\n\n      function abort(reason) {\n        abortReason = reason;\n        abortController.abort();\n      }\n\n      var promise = function () {\n        try {\n          var _temp3 = function _temp3(_result) {\n            if (_exit2) return _result; // We dispatch the result action _after_ the catch, to avoid having any errors\n            // here get swallowed by the try/catch block,\n            // per https://twitter.com/dan_abramov/status/770914221638942720\n            // and https://redux-toolkit.js.org/tutorials/advanced-tutorial#async-error-handling-logic-in-thunks\n\n            var skipDispatch = options && !options.dispatchConditionRejection && rejected.match(finalAction) && finalAction.meta.condition;\n\n            if (!skipDispatch) {\n              dispatch(finalAction);\n            }\n\n            return finalAction;\n          };\n\n          var _exit2 = false;\n          var finalAction;\n\n          var _temp4 = _catch(function () {\n            if (options && options.condition && options.condition(arg, {\n              getState: getState,\n              extra: extra\n            }) === false) {\n              throw {\n                name: 'ConditionError',\n                message: 'Aborted due to condition callback returning false.'\n              };\n            }\n\n            dispatch(pending(requestId, arg));\n            return Promise.resolve(Promise.race([abortedPromise, Promise.resolve(payloadCreator(arg, {\n              dispatch: dispatch,\n              getState: getState,\n              extra: extra,\n              requestId: requestId,\n              signal: abortController.signal,\n              rejectWithValue: function rejectWithValue(value) {\n                return new RejectWithValue(value);\n              }\n            })).then(function (result) {\n              if (result instanceof RejectWithValue) {\n                return rejected(null, requestId, arg, result.value);\n              }\n\n              return fulfilled(result, requestId, arg);\n            })])).then(function (_Promise$race) {\n              finalAction = _Promise$race;\n            });\n          }, function (err) {\n            finalAction = rejected(err, requestId, arg);\n          });\n\n          return Promise.resolve(_temp4 && _temp4.then ? _temp4.then(_temp3) : _temp3(_temp4));\n        } catch (e) {\n          return Promise.reject(e);\n        }\n      }();\n\n      return Object.assign(promise, {\n        abort: abort\n      });\n    };\n  }\n\n  return Object.assign(actionCreator, {\n    pending: pending,\n    rejected: rejected,\n    fulfilled: fulfilled,\n    typePrefix: typePrefix\n  });\n}\n/**\r\n * @public\r\n */\n\n\nfunction unwrapResult(returned) {\n  if ('error' in returned) {\n    throw returned.error;\n  }\n\n  return returned.payload;\n} // we assume RTK will be used with React Native and other Proxy-less\n// environments.  In addition, that's how Immer 4 behaved, and since\n// we want to ship this in an RTK minor, we should keep the same behavior.\n\n\nenableES5();\nexport { configureStore, createAction, createAsyncThunk, createEntityAdapter, createImmutableStateInvariantMiddleware, createReducer, createSerializableStateInvariantMiddleware, createSlice, findNonSerializableValue, getDefaultMiddleware, getType, isImmutableDefault, isPlain, nanoid, unwrapResult };","map":{"version":3,"sources":["../src/devtoolsExtension.ts","../src/isPlainObject.ts","../src/utils.ts","../src/immutableStateInvariantMiddleware.ts","../src/serializableStateInvariantMiddleware.ts","../src/getDefaultMiddleware.ts","../src/configureStore.ts","../src/createAction.ts","../src/mapBuilders.ts","../src/createReducer.ts","../src/createSlice.ts","../src/entities/entity_state.ts","../src/entities/state_selectors.ts","../src/entities/state_adapter.ts","../src/entities/utils.ts","../src/entities/unsorted_state_adapter.ts","../src/entities/sorted_state_adapter.ts","../src/entities/create_adapter.ts","../node_modules/babel-plugin-transform-async-to-promises/helpers.js","../src/nanoid.ts","../src/createAsyncThunk.ts","../src/index.ts"],"names":["composeWithDevTools","window","arguments","compose","isPlainObject","value","proto","Object","getTimeMeasureUtils","maxDelay","fnName","elapsed","measureTime","started","Date","fn","finished","warnIfExceeded","console","isProduction","process","prefix","message","JSON","getSerialize","stack","keys","thisPos","decycler","serializer","isImmutableDefault","trackForMutations","isImmutable","ignorePaths","obj","trackedProperties","trackProperties","detectMutations","path","tracked","childPath","sameParentRef","prevObj","trackedProperty","sameRef","Number","wasMutated","keysToDetect","i","key","result","createImmutableStateInvariantMiddleware","options","next","ignoredPaths","warnAfter","ignore","track","getState","state","tracker","measureUtils","dispatchedAction","invariant","stringify","isPlain","val","Array","findNonSerializableValue","isSerializable","getEntries","keyPath","entries","hasIgnoredPaths","property","nestedValue","nestedPath","foundNestedSerializable","createSerializableStateInvariantMiddleware","ignoredActions","ignoredActionPaths","action","foundActionNonSerializableValue","storeAPI","foundStateNonSerializableValue","getDefaultMiddleware","thunk","immutableCheck","serializableCheck","middlewareArray","isBoolean","thunkMiddleware","immutableOptions","serializableOptions","IS_PRODUCTION","configureStore","reducer","undefined","middleware","devTools","preloadedState","enhancers","rootReducer","combineReducers","middlewareEnhancer","applyMiddleware","finalCompose","trace","storeEnhancers","composedEnhancer","createStore","createAction","type","prepareAction","prepared","payload","meta","error","actionCreator","isFSA","getType","executeReducerBuilderCallback","builderCallback","actionsMap","builder","addCase","typeOrActionCreator","createReducer","initialState","mapOrBuilderCallback","caseReducer","isDraft","draft","createNextState","slice","createSlice","name","reducers","extraReducers","reducerNames","sliceCaseReducersByName","sliceCaseReducersByType","actionCreators","maybeReducerWithPrepare","prepareCallback","finalCaseReducers","actions","caseReducers","getInitialEntityState","ids","entities","createInitialStateFactory","additionalState","getInitialState","createSelectorsFactory","selectIds","selectEntities","selectAll","createSelector","selectId","selectById","selectTotal","selectGlobalizedEntities","getSelectors","createSingleArgumentStateOperator","mutator","operator","createStateOperator","runMutator","isPayloadActionArgument","arg","selectIdValue","entity","createUnsortedStateAdapter","addOneMutably","addManyMutably","removeManyMutably","didMutate","id","original","update","updated","newKey","hasNewKey","updateManyMutably","newKeys","updatesPerEntity","updates","didMutateEntities","didMutateIds","takeNewKey","upsertManyMutably","added","changes","removeAll","addOne","addMany","setAll","updateOne","updateMany","upsertOne","upsertMany","removeOne","removeMany","createSortedStateAdapter","sort","newModels","models","merge","takeUpdatedModel","a","b","allEntities","newSortedIds","areArraysEqual","createEntityAdapter","sortComparer","instance","stateFactory","selectorsFactory","stateAdapter","urlAlphabet","nanoid","size","Math","commonProperties","RejectWithValue","miniSerializeError","simpleError","String","createAsyncThunk","typePrefix","payloadCreator","fulfilled","requestId","pending","rejected","aborted","condition","displayedWarning","AC","addEventListener","dispatchEvent","onabort","removeEventListener","abort","abortController","abortedPromise","reject","abortReason","promise","extra","dispatch","finalAction","signal","rejectWithValue","err","skipDispatch","unwrapResult","returned","enableES5"],"mappings":"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","sourcesContent":["import { Action, ActionCreator, StoreEnhancer, compose } from 'redux'\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface EnhancerOptions {\r\n  /**\r\n   * the instance name to be showed on the monitor page. Default value is `document.title`.\r\n   * If not specified and there's no document title, it will consist of `tabId` and `instanceId`.\r\n   */\r\n  name?: string\r\n  /**\r\n   * action creators functions to be available in the Dispatcher.\r\n   */\r\n  actionCreators?: ActionCreator<any>[] | { [key: string]: ActionCreator<any> }\r\n  /**\r\n   * if more than one action is dispatched in the indicated interval, all new actions will be collected and sent at once.\r\n   * It is the joint between performance and speed. When set to `0`, all actions will be sent instantly.\r\n   * Set it to a higher value when experiencing perf issues (also `maxAge` to a lower value).\r\n   *\r\n   * @default 500 ms.\r\n   */\r\n  latency?: number\r\n  /**\r\n   * (> 1) - maximum allowed actions to be stored in the history tree. The oldest actions are removed once maxAge is reached. It's critical for performance.\r\n   *\r\n   * @default 50\r\n   */\r\n  maxAge?: number\r\n  /**\r\n   * - `undefined` - will use regular `JSON.stringify` to send data (it's the fast mode).\r\n   * - `false` - will handle also circular references.\r\n   * - `true` - will handle also date, regex, undefined, error objects, symbols, maps, sets and functions.\r\n   * - object, which contains `date`, `regex`, `undefined`, `error`, `symbol`, `map`, `set` and `function` keys.\r\n   *   For each of them you can indicate if to include (by setting as `true`).\r\n   *   For `function` key you can also specify a custom function which handles serialization.\r\n   *   See [`jsan`](https://github.com/kolodny/jsan) for more details.\r\n   */\r\n  serialize?:\r\n    | boolean\r\n    | {\r\n        date?: boolean\r\n        regex?: boolean\r\n        undefined?: boolean\r\n        error?: boolean\r\n        symbol?: boolean\r\n        map?: boolean\r\n        set?: boolean\r\n        function?: boolean | Function\r\n      }\r\n  /**\r\n   * function which takes `action` object and id number as arguments, and should return `action` object back.\r\n   */\r\n  actionSanitizer?: <A extends Action>(action: A, id: number) => A\r\n  /**\r\n   * function which takes `state` object and index as arguments, and should return `state` object back.\r\n   */\r\n  stateSanitizer?: <S>(state: S, index: number) => S\r\n  /**\r\n   * *string or array of strings as regex* - actions types to be hidden / shown in the monitors (while passed to the reducers).\r\n   * If `actionsWhitelist` specified, `actionsBlacklist` is ignored.\r\n   */\r\n  actionsBlacklist?: string | string[]\r\n  /**\r\n   * *string or array of strings as regex* - actions types to be hidden / shown in the monitors (while passed to the reducers).\r\n   * If `actionsWhitelist` specified, `actionsBlacklist` is ignored.\r\n   */\r\n  actionsWhitelist?: string | string[]\r\n  /**\r\n   * called for every action before sending, takes `state` and `action` object, and returns `true` in case it allows sending the current data to the monitor.\r\n   * Use it as a more advanced version of `actionsBlacklist`/`actionsWhitelist` parameters.\r\n   */\r\n  predicate?: <S, A extends Action>(state: S, action: A) => boolean\r\n  /**\r\n   * if specified as `false`, it will not record the changes till clicking on `Start recording` button.\r\n   * Available only for Redux enhancer, for others use `autoPause`.\r\n   *\r\n   * @default true\r\n   */\r\n  shouldRecordChanges?: boolean\r\n  /**\r\n   * if specified, whenever clicking on `Pause recording` button and there are actions in the history log, will add this action type.\r\n   * If not specified, will commit when paused. Available only for Redux enhancer.\r\n   *\r\n   * @default \"@@PAUSED\"\"\r\n   */\r\n  pauseActionType?: string\r\n  /**\r\n   * auto pauses when the extension’s window is not opened, and so has zero impact on your app when not in use.\r\n   * Not available for Redux enhancer (as it already does it but storing the data to be sent).\r\n   *\r\n   * @default false\r\n   */\r\n  autoPause?: boolean\r\n  /**\r\n   * if specified as `true`, it will not allow any non-monitor actions to be dispatched till clicking on `Unlock changes` button.\r\n   * Available only for Redux enhancer.\r\n   *\r\n   * @default false\r\n   */\r\n  shouldStartLocked?: boolean\r\n  /**\r\n   * if set to `false`, will not recompute the states on hot reloading (or on replacing the reducers). Available only for Redux enhancer.\r\n   *\r\n   * @default true\r\n   */\r\n  shouldHotReload?: boolean\r\n  /**\r\n   * if specified as `true`, whenever there's an exception in reducers, the monitors will show the error message, and next actions will not be dispatched.\r\n   *\r\n   * @default false\r\n   */\r\n  shouldCatchErrors?: boolean\r\n  /**\r\n   * If you want to restrict the extension, specify the features you allow.\r\n   * If not specified, all of the features are enabled. When set as an object, only those included as `true` will be allowed.\r\n   * Note that except `true`/`false`, `import` and `export` can be set as `custom` (which is by default for Redux enhancer), meaning that the importing/exporting occurs on the client side.\r\n   * Otherwise, you'll get/set the data right from the monitor part.\r\n   */\r\n  features?: {\r\n    /**\r\n     * start/pause recording of dispatched actions\r\n     */\r\n    pause?: boolean\r\n    /**\r\n     * lock/unlock dispatching actions and side effects\r\n     */\r\n    lock?: boolean\r\n    /**\r\n     * persist states on page reloading\r\n     */\r\n    persist?: boolean\r\n    /**\r\n     * export history of actions in a file\r\n     */\r\n    export?: boolean | 'custom'\r\n    /**\r\n     * import history of actions from a file\r\n     */\r\n    import?: boolean | 'custom'\r\n    /**\r\n     * jump back and forth (time travelling)\r\n     */\r\n    jump?: boolean\r\n    /**\r\n     * skip (cancel) actions\r\n     */\r\n    skip?: boolean\r\n    /**\r\n     * drag and drop actions in the history list\r\n     */\r\n    reorder?: boolean\r\n    /**\r\n     * dispatch custom actions or action creators\r\n     */\r\n    dispatch?: boolean\r\n    /**\r\n     * generate tests for the selected actions\r\n     */\r\n    test?: boolean\r\n  }\r\n  /**\r\n   * Set to true or a stacktrace-returning function to record call stack traces for dispatched actions.\r\n   * Defaults to false.\r\n   */\r\n  trace?: boolean | (<A extends Action>(action: A) => string)\r\n  /**\r\n   * The maximum number of stack trace entries to record per action. Defaults to 10.\r\n   */\r\n  traceLimit?: number\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport const composeWithDevTools: {\r\n  (options: EnhancerOptions): typeof compose\r\n  <StoreExt>(...funcs: Array<StoreEnhancer<StoreExt>>): StoreEnhancer<StoreExt>\r\n} =\r\n  typeof window !== 'undefined' &&\r\n  (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION_COMPOSE__\r\n    : function() {\r\n        if (arguments.length === 0) return undefined\r\n        if (typeof arguments[0] === 'object') return compose\r\n        return compose.apply(null, (arguments as any) as Function[])\r\n      }\r\n\r\n/**\r\n * @public\r\n */\r\nexport const devToolsEnhancer: {\r\n  (options: EnhancerOptions): StoreEnhancer<any>\r\n} =\r\n  typeof window !== 'undefined' && (window as any).__REDUX_DEVTOOLS_EXTENSION__\r\n    ? (window as any).__REDUX_DEVTOOLS_EXTENSION__\r\n    : function() {\r\n        return function(noop) {\r\n          return noop\r\n        }\r\n      }\r\n","/**\r\n * Returns true if the passed value is \"plain\" object, i.e. an object whose\r\n * protoype is the root `Object.prototype`. This includes objects created\r\n * using object literals, but not for instance for class instances.\r\n *\r\n * @param {any} value The value to inspect.\r\n * @returns {boolean} True if the argument appears to be a plain object.\r\n */\r\nexport default function isPlainObject(value: unknown): value is object {\r\n  if (typeof value !== 'object' || value === null) return false\r\n\r\n  let proto = value\r\n  while (Object.getPrototypeOf(proto) !== null) {\r\n    proto = Object.getPrototypeOf(proto)\r\n  }\r\n\r\n  return Object.getPrototypeOf(value) === proto\r\n}\r\n","export function getTimeMeasureUtils(maxDelay: number, fnName: string) {\r\n  let elapsed = 0\r\n  return {\r\n    measureTime<T>(fn: () => T): T {\r\n      const started = Date.now()\r\n      try {\r\n        return fn()\r\n      } finally {\r\n        const finished = Date.now()\r\n        elapsed += finished - started\r\n      }\r\n    },\r\n    warnIfExceeded() {\r\n      if (elapsed > maxDelay) {\r\n        console.warn(`${fnName} took ${elapsed}ms, which is more than the warning threshold of ${maxDelay}ms. \r\nIf your state or actions are very large, you may want to disable the middleware as it might cause too much of a slowdown in development mode. See https://redux-toolkit.js.org/api/getDefaultMiddleware for instructions.\r\nIt is disabled in production builds, so you don't need to worry about that.`)\r\n      }\r\n    }\r\n  }\r\n}\r\n","import { Middleware } from 'redux'\r\nimport { getTimeMeasureUtils } from './utils'\r\n\r\ntype EntryProcessor = (key: string, value: any) => any\r\n\r\nconst isProduction: boolean = process.env.NODE_ENV === 'production'\r\nconst prefix: string = 'Invariant failed'\r\n\r\n// Throw an error if the condition fails\r\n// Strip out error messages for production\r\n// > Not providing an inline default argument for message as the result is smaller\r\nfunction invariant(condition: any, message?: string) {\r\n  if (condition) {\r\n    return\r\n  }\r\n  // Condition not passed\r\n\r\n  // In production we strip the message but still throw\r\n  if (isProduction) {\r\n    throw new Error(prefix)\r\n  }\r\n\r\n  // When not in production we allow the message to pass through\r\n  // *This block will be removed in production builds*\r\n  throw new Error(`${prefix}: ${message || ''}`)\r\n}\r\n\r\nfunction stringify(\r\n  obj: any,\r\n  serializer?: EntryProcessor,\r\n  indent?: string | number,\r\n  decycler?: EntryProcessor\r\n): string {\r\n  return JSON.stringify(obj, getSerialize(serializer, decycler), indent)\r\n}\r\n\r\nfunction getSerialize(\r\n  serializer?: EntryProcessor,\r\n  decycler?: EntryProcessor\r\n): EntryProcessor {\r\n  let stack: any[] = [],\r\n    keys: any[] = []\r\n\r\n  if (!decycler)\r\n    decycler = function(_: string, value: any) {\r\n      if (stack[0] === value) return '[Circular ~]'\r\n      return (\r\n        '[Circular ~.' + keys.slice(0, stack.indexOf(value)).join('.') + ']'\r\n      )\r\n    }\r\n\r\n  return function(this: any, key: string, value: any) {\r\n    if (stack.length > 0) {\r\n      var thisPos = stack.indexOf(this)\r\n      ~thisPos ? stack.splice(thisPos + 1) : stack.push(this)\r\n      ~thisPos ? keys.splice(thisPos, Infinity, key) : keys.push(key)\r\n      if (~stack.indexOf(value)) value = decycler!.call(this, key, value)\r\n    } else stack.push(value)\r\n\r\n    return serializer == null ? value : serializer.call(this, key, value)\r\n  }\r\n}\r\n\r\n/**\r\n * The default `isImmutable` function.\r\n *\r\n * @public\r\n */\r\nexport function isImmutableDefault(value: unknown): boolean {\r\n  return (\r\n    typeof value !== 'object' || value === null || typeof value === 'undefined'\r\n  )\r\n}\r\n\r\nexport function trackForMutations(\r\n  isImmutable: IsImmutableFunc,\r\n  ignorePaths: string[] | undefined,\r\n  obj: any\r\n) {\r\n  const trackedProperties = trackProperties(isImmutable, ignorePaths, obj)\r\n  return {\r\n    detectMutations() {\r\n      return detectMutations(isImmutable, ignorePaths, trackedProperties, obj)\r\n    }\r\n  }\r\n}\r\n\r\ninterface TrackedProperty {\r\n  value: any\r\n  children: Record<string, any>\r\n}\r\n\r\nfunction trackProperties(\r\n  isImmutable: IsImmutableFunc,\r\n  ignorePaths: IgnorePaths = [],\r\n  obj: Record<string, any>,\r\n  path: string[] = []\r\n) {\r\n  const tracked: Partial<TrackedProperty> = { value: obj }\r\n\r\n  if (!isImmutable(obj)) {\r\n    tracked.children = {}\r\n\r\n    for (const key in obj) {\r\n      const childPath = path.concat(key)\r\n      if (\r\n        ignorePaths.length &&\r\n        ignorePaths.indexOf(childPath.join('.')) !== -1\r\n      ) {\r\n        continue\r\n      }\r\n\r\n      tracked.children[key] = trackProperties(\r\n        isImmutable,\r\n        ignorePaths,\r\n        obj[key],\r\n        childPath\r\n      )\r\n    }\r\n  }\r\n  return tracked as TrackedProperty\r\n}\r\n\r\ntype IgnorePaths = string[]\r\n\r\nfunction detectMutations(\r\n  isImmutable: IsImmutableFunc,\r\n  ignorePaths: IgnorePaths = [],\r\n  trackedProperty: TrackedProperty,\r\n  obj: any,\r\n  sameParentRef: boolean = false,\r\n  path: string[] = []\r\n): { wasMutated: boolean; path?: string[] } {\r\n  const prevObj = trackedProperty ? trackedProperty.value : undefined\r\n\r\n  const sameRef = prevObj === obj\r\n\r\n  if (sameParentRef && !sameRef && !Number.isNaN(obj)) {\r\n    return { wasMutated: true, path }\r\n  }\r\n\r\n  if (isImmutable(prevObj) || isImmutable(obj)) {\r\n    return { wasMutated: false }\r\n  }\r\n\r\n  // Gather all keys from prev (tracked) and after objs\r\n  const keysToDetect: Record<string, boolean> = {}\r\n  Object.keys(trackedProperty.children).forEach(key => {\r\n    keysToDetect[key] = true\r\n  })\r\n  Object.keys(obj).forEach(key => {\r\n    keysToDetect[key] = true\r\n  })\r\n\r\n  const keys = Object.keys(keysToDetect)\r\n  for (let i = 0; i < keys.length; i++) {\r\n    const key = keys[i]\r\n    const childPath = path.concat(key)\r\n    if (ignorePaths.length && ignorePaths.indexOf(childPath.join('.')) !== -1) {\r\n      continue\r\n    }\r\n\r\n    const result = detectMutations(\r\n      isImmutable,\r\n      ignorePaths,\r\n      trackedProperty.children[key],\r\n      obj[key],\r\n      sameRef,\r\n      childPath\r\n    )\r\n\r\n    if (result.wasMutated) {\r\n      return result\r\n    }\r\n  }\r\n  return { wasMutated: false }\r\n}\r\n\r\ntype IsImmutableFunc = (value: any) => boolean\r\n\r\n/**\r\n * Options for `createImmutableStateInvariantMiddleware()`.\r\n *\r\n * @public\r\n */\r\nexport interface ImmutableStateInvariantMiddlewareOptions {\r\n  isImmutable?: IsImmutableFunc\r\n  ignoredPaths?: string[]\r\n  warnAfter?: number\r\n  ignore?: string[] // @deprecated. Use ignoredPaths\r\n}\r\n\r\n/**\r\n * Creates a middleware that checks whether any state was mutated in between\r\n * dispatches or during a dispatch. If any mutations are detected, an error is\r\n * thrown.\r\n *\r\n * @param options Middleware options.\r\n *\r\n * @public\r\n */\r\nexport function createImmutableStateInvariantMiddleware(\r\n  options: ImmutableStateInvariantMiddlewareOptions = {}\r\n): Middleware {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    return () => next => action => next(action)\r\n  }\r\n\r\n  let {\r\n    isImmutable = isImmutableDefault,\r\n    ignoredPaths,\r\n    warnAfter = 32,\r\n    ignore\r\n  } = options\r\n\r\n  // Alias ignore->ignoredPaths, but prefer ignoredPaths if present\r\n  ignoredPaths = ignoredPaths || ignore\r\n\r\n  const track = trackForMutations.bind(null, isImmutable, ignoredPaths)\r\n\r\n  return ({ getState }) => {\r\n    let state = getState()\r\n    let tracker = track(state)\r\n\r\n    let result\r\n    return next => action => {\r\n      const measureUtils = getTimeMeasureUtils(\r\n        warnAfter,\r\n        'ImmutableStateInvariantMiddleware'\r\n      )\r\n\r\n      measureUtils.measureTime(() => {\r\n        state = getState()\r\n\r\n        result = tracker.detectMutations()\r\n        // Track before potentially not meeting the invariant\r\n        tracker = track(state)\r\n\r\n        invariant(\r\n          !result.wasMutated,\r\n          `A state mutation was detected between dispatches, in the path '${(\r\n            result.path || []\r\n          ).join(\r\n            '.'\r\n          )}'.  This may cause incorrect behavior. (http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments)`\r\n        )\r\n      })\r\n\r\n      const dispatchedAction = next(action)\r\n\r\n      measureUtils.measureTime(() => {\r\n        state = getState()\r\n\r\n        result = tracker.detectMutations()\r\n        // Track before potentially not meeting the invariant\r\n        tracker = track(state)\r\n\r\n        result.wasMutated &&\r\n          invariant(\r\n            !result.wasMutated,\r\n            `A state mutation was detected inside a dispatch, in the path: ${(\r\n              result.path || []\r\n            ).join(\r\n              '.'\r\n            )}. Take a look at the reducer(s) handling the action ${stringify(\r\n              action\r\n            )}. (http://redux.js.org/docs/Troubleshooting.html#never-mutate-reducer-arguments)`\r\n          )\r\n      })\r\n\r\n      measureUtils.warnIfExceeded()\r\n\r\n      return dispatchedAction\r\n    }\r\n  }\r\n}\r\n","import isPlainObject from './isPlainObject'\r\nimport { Middleware } from 'redux'\r\nimport { getTimeMeasureUtils } from './utils'\r\n\r\n/**\r\n * Returns true if the passed value is \"plain\", i.e. a value that is either\r\n * directly JSON-serializable (boolean, number, string, array, plain object)\r\n * or `undefined`.\r\n *\r\n * @param val The value to check.\r\n *\r\n * @public\r\n */\r\nexport function isPlain(val: any) {\r\n  return (\r\n    typeof val === 'undefined' ||\r\n    val === null ||\r\n    typeof val === 'string' ||\r\n    typeof val === 'boolean' ||\r\n    typeof val === 'number' ||\r\n    Array.isArray(val) ||\r\n    isPlainObject(val)\r\n  )\r\n}\r\n\r\ninterface NonSerializableValue {\r\n  keyPath: string\r\n  value: unknown\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport function findNonSerializableValue(\r\n  value: unknown,\r\n  path: ReadonlyArray<string> = [],\r\n  isSerializable: (value: unknown) => boolean = isPlain,\r\n  getEntries?: (value: unknown) => [string, any][],\r\n  ignoredPaths: string[] = []\r\n): NonSerializableValue | false {\r\n  let foundNestedSerializable: NonSerializableValue | false\r\n\r\n  if (!isSerializable(value)) {\r\n    return {\r\n      keyPath: path.join('.') || '<root>',\r\n      value: value\r\n    }\r\n  }\r\n\r\n  if (typeof value !== 'object' || value === null) {\r\n    return false\r\n  }\r\n\r\n  const entries = getEntries != null ? getEntries(value) : Object.entries(value)\r\n\r\n  const hasIgnoredPaths = ignoredPaths.length > 0\r\n\r\n  for (const [property, nestedValue] of entries) {\r\n    const nestedPath = path.concat(property)\r\n\r\n    if (hasIgnoredPaths && ignoredPaths.indexOf(nestedPath.join('.')) >= 0) {\r\n      continue\r\n    }\r\n\r\n    if (!isSerializable(nestedValue)) {\r\n      return {\r\n        keyPath: nestedPath.join('.'),\r\n        value: nestedValue\r\n      }\r\n    }\r\n\r\n    if (typeof nestedValue === 'object') {\r\n      foundNestedSerializable = findNonSerializableValue(\r\n        nestedValue,\r\n        nestedPath,\r\n        isSerializable,\r\n        getEntries,\r\n        ignoredPaths\r\n      )\r\n\r\n      if (foundNestedSerializable) {\r\n        return foundNestedSerializable\r\n      }\r\n    }\r\n  }\r\n\r\n  return false\r\n}\r\n\r\n/**\r\n * Options for `createSerializableStateInvariantMiddleware()`.\r\n *\r\n * @public\r\n */\r\nexport interface SerializableStateInvariantMiddlewareOptions {\r\n  /**\r\n   * The function to check if a value is considered serializable. This\r\n   * function is applied recursively to every value contained in the\r\n   * state. Defaults to `isPlain()`.\r\n   */\r\n  isSerializable?: (value: any) => boolean\r\n  /**\r\n   * The function that will be used to retrieve entries from each\r\n   * value.  If unspecified, `Object.entries` will be used. Defaults\r\n   * to `undefined`.\r\n   */\r\n  getEntries?: (value: any) => [string, any][]\r\n\r\n  /**\r\n   * An array of action types to ignore when checking for serializability, Defaults to []\r\n   */\r\n  ignoredActions?: string[]\r\n\r\n  /**\r\n   * An array of dot-separated path strings to ignore when checking for serializability, Defaults to ['meta.arg']\r\n   */\r\n  ignoredActionPaths?: string[]\r\n\r\n  /**\r\n   * An array of dot-separated path strings to ignore when checking for serializability, Defaults to []\r\n   */\r\n  ignoredPaths?: string[]\r\n  /**\r\n   * Execution time warning threshold. If the middleware takes longer than `warnAfter` ms, a warning will be displayed in the console. Defaults to 32\r\n   */\r\n  warnAfter?: number\r\n}\r\n\r\n/**\r\n * Creates a middleware that, after every state change, checks if the new\r\n * state is serializable. If a non-serializable value is found within the\r\n * state, an error is printed to the console.\r\n *\r\n * @param options Middleware options.\r\n *\r\n * @public\r\n */\r\nexport function createSerializableStateInvariantMiddleware(\r\n  options: SerializableStateInvariantMiddlewareOptions = {}\r\n): Middleware {\r\n  if (process.env.NODE_ENV === 'production') {\r\n    return () => next => action => next(action)\r\n  }\r\n  const {\r\n    isSerializable = isPlain,\r\n    getEntries,\r\n    ignoredActions = [],\r\n    ignoredActionPaths = ['meta.arg'],\r\n    ignoredPaths = [],\r\n    warnAfter = 32\r\n  } = options\r\n\r\n  return storeAPI => next => action => {\r\n    if (ignoredActions.length && ignoredActions.indexOf(action.type) !== -1) {\r\n      return next(action)\r\n    }\r\n\r\n    const measureUtils = getTimeMeasureUtils(\r\n      warnAfter,\r\n      'SerializableStateInvariantMiddleware'\r\n    )\r\n    measureUtils.measureTime(() => {\r\n      const foundActionNonSerializableValue = findNonSerializableValue(\r\n        action,\r\n        [],\r\n        isSerializable,\r\n        getEntries,\r\n        ignoredActionPaths\r\n      )\r\n\r\n      if (foundActionNonSerializableValue) {\r\n        const { keyPath, value } = foundActionNonSerializableValue\r\n\r\n        console.error(\r\n          `A non-serializable value was detected in an action, in the path: \\`${keyPath}\\`. Value:`,\r\n          value,\r\n          '\\nTake a look at the logic that dispatched this action: ',\r\n          action,\r\n          '\\n(See https://redux.js.org/faq/actions#why-should-type-be-a-string-or-at-least-serializable-why-should-my-action-types-be-constants)'\r\n        )\r\n      }\r\n    })\r\n\r\n    const result = next(action)\r\n\r\n    measureUtils.measureTime(() => {\r\n      const state = storeAPI.getState()\r\n\r\n      const foundStateNonSerializableValue = findNonSerializableValue(\r\n        state,\r\n        [],\r\n        isSerializable,\r\n        getEntries,\r\n        ignoredPaths\r\n      )\r\n\r\n      if (foundStateNonSerializableValue) {\r\n        const { keyPath, value } = foundStateNonSerializableValue\r\n\r\n        console.error(\r\n          `A non-serializable value was detected in the state, in the path: \\`${keyPath}\\`. Value:`,\r\n          value,\r\n          `\r\nTake a look at the reducer(s) handling this action type: ${action.type}.\r\n(See https://redux.js.org/faq/organizing-state#can-i-put-functions-promises-or-other-non-serializable-items-in-my-store-state)`\r\n        )\r\n      }\r\n    })\r\n\r\n    measureUtils.warnIfExceeded()\r\n\r\n    return result\r\n  }\r\n}\r\n","import { Middleware, AnyAction } from 'redux'\r\nimport thunkMiddleware, { ThunkMiddleware } from 'redux-thunk'\r\nimport {\r\n  /* PROD_START_REMOVE_UMD */\r\n  createImmutableStateInvariantMiddleware,\r\n  /* PROD_STOP_REMOVE_UMD */\r\n  ImmutableStateInvariantMiddlewareOptions\r\n} from './immutableStateInvariantMiddleware'\r\n\r\nimport {\r\n  createSerializableStateInvariantMiddleware,\r\n  SerializableStateInvariantMiddlewareOptions\r\n} from './serializableStateInvariantMiddleware'\r\n\r\nfunction isBoolean(x: any): x is boolean {\r\n  return typeof x === 'boolean'\r\n}\r\n\r\ninterface ThunkOptions<E = any> {\r\n  extraArgument: E\r\n}\r\n\r\ninterface GetDefaultMiddlewareOptions {\r\n  thunk?: boolean | ThunkOptions\r\n  immutableCheck?: boolean | ImmutableStateInvariantMiddlewareOptions\r\n  serializableCheck?: boolean | SerializableStateInvariantMiddlewareOptions\r\n}\r\n\r\nexport type ThunkMiddlewareFor<\r\n  S,\r\n  O extends GetDefaultMiddlewareOptions = {}\r\n> = O extends {\r\n  thunk: false\r\n}\r\n  ? never\r\n  : O extends { thunk: { extraArgument: infer E } }\r\n  ? ThunkMiddleware<S, AnyAction, E>\r\n  :\r\n      | ThunkMiddleware<S, AnyAction, null> //The ThunkMiddleware with a `null` ExtraArgument is here to provide backwards-compatibility.\r\n      | ThunkMiddleware<S, AnyAction>\r\n\r\n/**\r\n * Returns any array containing the default middleware installed by\r\n * `configureStore()`. Useful if you want to configure your store with a custom\r\n * `middleware` array but still keep the default set.\r\n *\r\n * @return The default middleware used by `configureStore()`.\r\n *\r\n * @public\r\n */\r\nexport function getDefaultMiddleware<\r\n  S = any,\r\n  O extends Partial<GetDefaultMiddlewareOptions> = {\r\n    thunk: true\r\n    immutableCheck: true\r\n    serializableCheck: true\r\n  }\r\n>(options: O = {} as O): Array<Middleware<{}, S> | ThunkMiddlewareFor<S, O>> {\r\n  const {\r\n    thunk = true,\r\n    immutableCheck = true,\r\n    serializableCheck = true\r\n  } = options\r\n\r\n  let middlewareArray: Middleware<{}, S>[] = []\r\n\r\n  if (thunk) {\r\n    if (isBoolean(thunk)) {\r\n      middlewareArray.push(thunkMiddleware)\r\n    } else {\r\n      middlewareArray.push(\r\n        thunkMiddleware.withExtraArgument(thunk.extraArgument)\r\n      )\r\n    }\r\n  }\r\n\r\n  if (process.env.NODE_ENV !== 'production') {\r\n    if (immutableCheck) {\r\n      /* PROD_START_REMOVE_UMD */\r\n      let immutableOptions: ImmutableStateInvariantMiddlewareOptions = {}\r\n\r\n      if (!isBoolean(immutableCheck)) {\r\n        immutableOptions = immutableCheck\r\n      }\r\n\r\n      middlewareArray.unshift(\r\n        createImmutableStateInvariantMiddleware(immutableOptions)\r\n      )\r\n      /* PROD_STOP_REMOVE_UMD */\r\n    }\r\n\r\n    if (serializableCheck) {\r\n      let serializableOptions: SerializableStateInvariantMiddlewareOptions = {}\r\n\r\n      if (!isBoolean(serializableCheck)) {\r\n        serializableOptions = serializableCheck\r\n      }\r\n\r\n      middlewareArray.push(\r\n        createSerializableStateInvariantMiddleware(serializableOptions)\r\n      )\r\n    }\r\n  }\r\n\r\n  return middlewareArray as any\r\n}\r\n","import {\r\n  createStore,\r\n  compose,\r\n  applyMiddleware,\r\n  combineReducers,\r\n  Reducer,\r\n  ReducersMapObject,\r\n  Middleware,\r\n  Action,\r\n  AnyAction,\r\n  StoreEnhancer,\r\n  Store,\r\n  DeepPartial,\r\n  Dispatch\r\n} from 'redux'\r\nimport {\r\n  composeWithDevTools,\r\n  EnhancerOptions as DevToolsOptions\r\n} from './devtoolsExtension'\r\n\r\nimport isPlainObject from './isPlainObject'\r\nimport {\r\n  getDefaultMiddleware,\r\n  ThunkMiddlewareFor\r\n} from './getDefaultMiddleware'\r\nimport { DispatchForMiddlewares } from './tsHelpers'\r\n\r\nconst IS_PRODUCTION = process.env.NODE_ENV === 'production'\r\n\r\n/**\r\n * Callback function type, to be used in `ConfigureStoreOptions.enhancers`\r\n *\r\n * @public\r\n */\r\nexport type ConfigureEnhancersCallback = (\r\n  defaultEnhancers: StoreEnhancer[]\r\n) => StoreEnhancer[]\r\n\r\n/**\r\n * Options for `configureStore()`.\r\n *\r\n * @public\r\n */\r\nexport interface ConfigureStoreOptions<\r\n  S = any,\r\n  A extends Action = AnyAction,\r\n  M extends Middlewares<S> = Middlewares<S>\r\n> {\r\n  /**\r\n   * A single reducer function that will be used as the root reducer, or an\r\n   * object of slice reducers that will be passed to `combineReducers()`.\r\n   */\r\n  reducer: Reducer<S, A> | ReducersMapObject<S, A>\r\n\r\n  /**\r\n   * An array of Redux middleware to install. If not supplied, defaults to\r\n   * the set of middleware returned by `getDefaultMiddleware()`.\r\n   */\r\n  middleware?: M\r\n\r\n  /**\r\n   * Whether to enable Redux DevTools integration. Defaults to `true`.\r\n   *\r\n   * Additional configuration can be done by passing Redux DevTools options\r\n   */\r\n  devTools?: boolean | DevToolsOptions\r\n\r\n  /**\r\n   * The initial state, same as Redux's createStore.\r\n   * You may optionally specify it to hydrate the state\r\n   * from the server in universal apps, or to restore a previously serialized\r\n   * user session. If you use `combineReducers()` to produce the root reducer\r\n   * function (either directly or indirectly by passing an object as `reducer`),\r\n   * this must be an object with the same shape as the reducer map keys.\r\n   */\r\n  // NOTE: The needlessly complicated `S extends any ? S : S` instead of just\r\n  // `S` ensures that the TypeScript compiler doesn't attempt to infer `S`\r\n  // based on the value passed as `preloadedState`, which might be a partial\r\n  // state rather than the full thing.\r\n  preloadedState?: DeepPartial<S extends any ? S : S>\r\n\r\n  /**\r\n   * The store enhancers to apply. See Redux's `createStore()`.\r\n   * All enhancers will be included before the DevTools Extension enhancer.\r\n   * If you need to customize the order of enhancers, supply a callback\r\n   * function that will receive the original array (ie, `[applyMiddleware]`),\r\n   * and should return a new array (such as `[applyMiddleware, offline]`).\r\n   * If you only need to add middleware, you can use the `middleware` parameter instaead.\r\n   */\r\n  enhancers?: StoreEnhancer[] | ConfigureEnhancersCallback\r\n}\r\n\r\ntype Middlewares<S> = ReadonlyArray<Middleware<{}, S>>\r\n\r\n/**\r\n * A Redux store returned by `configureStore()`. Supports dispatching\r\n * side-effectful _thunks_ in addition to plain actions.\r\n *\r\n * @public\r\n */\r\nexport interface EnhancedStore<\r\n  S = any,\r\n  A extends Action = AnyAction,\r\n  M extends Middlewares<S> = Middlewares<S>\r\n> extends Store<S, A> {\r\n  /**\r\n   * The `dispatch` method of your store, enhanced by all it's middlewares.\r\n   *\r\n   * @inheritdoc\r\n   */\r\n  dispatch: DispatchForMiddlewares<M> & Dispatch<A>\r\n}\r\n\r\n/**\r\n * A friendly abstraction over the standard Redux `createStore()` function.\r\n *\r\n * @param config The store configuration.\r\n * @returns A configured Redux store.\r\n *\r\n * @public\r\n */\r\nexport function configureStore<\r\n  S = any,\r\n  A extends Action = AnyAction,\r\n  M extends Middlewares<S> = [ThunkMiddlewareFor<S>]\r\n>(options: ConfigureStoreOptions<S, A, M>): EnhancedStore<S, A, M> {\r\n  const {\r\n    reducer = undefined,\r\n    middleware = getDefaultMiddleware(),\r\n    devTools = true,\r\n    preloadedState = undefined,\r\n    enhancers = undefined\r\n  } = options || {}\r\n\r\n  let rootReducer: Reducer<S, A>\r\n\r\n  if (typeof reducer === 'function') {\r\n    rootReducer = reducer\r\n  } else if (isPlainObject(reducer)) {\r\n    rootReducer = combineReducers(reducer)\r\n  } else {\r\n    throw new Error(\r\n      '\"reducer\" is a required argument, and must be a function or an object of functions that can be passed to combineReducers'\r\n    )\r\n  }\r\n\r\n  const middlewareEnhancer = applyMiddleware(...middleware)\r\n\r\n  let finalCompose = compose\r\n\r\n  if (devTools) {\r\n    finalCompose = composeWithDevTools({\r\n      // Enable capture of stack traces for dispatched Redux actions\r\n      trace: !IS_PRODUCTION,\r\n      ...(typeof devTools === 'object' && devTools)\r\n    })\r\n  }\r\n\r\n  let storeEnhancers: StoreEnhancer[] = [middlewareEnhancer]\r\n\r\n  if (Array.isArray(enhancers)) {\r\n    storeEnhancers = [middlewareEnhancer, ...enhancers]\r\n  } else if (typeof enhancers === 'function') {\r\n    storeEnhancers = enhancers(storeEnhancers)\r\n  }\r\n\r\n  const composedEnhancer = finalCompose(...storeEnhancers) as any\r\n\r\n  return createStore(\r\n    rootReducer,\r\n    preloadedState as DeepPartial<S>,\r\n    composedEnhancer\r\n  )\r\n}\r\n","import { Action } from 'redux'\r\nimport {\r\n  IsUnknownOrNonInferrable,\r\n  IfMaybeUndefined,\r\n  IfVoid,\r\n  IsAny\r\n} from './tsHelpers'\r\nimport isPlainObject from './isPlainObject'\r\n\r\n/**\r\n * An action with a string type and an associated payload. This is the\r\n * type of action returned by `createAction()` action creators.\r\n *\r\n * @template P The type of the action's payload.\r\n * @template T the type used for the action type.\r\n * @template M The type of the action's meta (optional)\r\n * @template E The type of the action's error (optional)\r\n *\r\n * @public\r\n */\r\nexport type PayloadAction<\r\n  P = void,\r\n  T extends string = string,\r\n  M = never,\r\n  E = never\r\n> = {\r\n  payload: P\r\n  type: T\r\n} & ([M] extends [never]\r\n  ? {}\r\n  : {\r\n      meta: M\r\n    }) &\r\n  ([E] extends [never]\r\n    ? {}\r\n    : {\r\n        error: E\r\n      })\r\n\r\n/**\r\n * A \"prepare\" method to be used as the second parameter of `createAction`.\r\n * Takes any number of arguments and returns a Flux Standard Action without\r\n * type (will be added later) that *must* contain a payload (might be undefined).\r\n *\r\n * @public\r\n */\r\nexport type PrepareAction<P> =\r\n  | ((...args: any[]) => { payload: P })\r\n  | ((...args: any[]) => { payload: P; meta: any })\r\n  | ((...args: any[]) => { payload: P; error: any })\r\n  | ((...args: any[]) => { payload: P; meta: any; error: any })\r\n\r\n/**\r\n * Internal version of `ActionCreatorWithPreparedPayload`. Not to be used externally.\r\n *\r\n * @internal\r\n */\r\nexport type _ActionCreatorWithPreparedPayload<\r\n  PA extends PrepareAction<any> | void,\r\n  T extends string = string\r\n> = PA extends PrepareAction<infer P>\r\n  ? ActionCreatorWithPreparedPayload<\r\n      Parameters<PA>,\r\n      P,\r\n      T,\r\n      ReturnType<PA> extends {\r\n        error: infer E\r\n      }\r\n        ? E\r\n        : never,\r\n      ReturnType<PA> extends {\r\n        meta: infer M\r\n      }\r\n        ? M\r\n        : never\r\n    >\r\n  : void\r\n\r\n/**\r\n * Basic type for all action creators.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n */\r\ninterface BaseActionCreator<P, T extends string, M = never, E = never> {\r\n  type: T\r\n  match(action: Action<unknown>): action is PayloadAction<P, T, M, E>\r\n}\r\n\r\n/**\r\n * An action creator that takes multiple arguments that are passed\r\n * to a `PrepareAction` method to create the final Action.\r\n * @typeParam Args arguments for the action creator function\r\n * @typeParam P `payload` type\r\n * @typeParam T `type` name\r\n * @typeParam E optional `error` type\r\n * @typeParam M optional `meta` type\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithPreparedPayload<\r\n  Args extends unknown[],\r\n  P,\r\n  T extends string = string,\r\n  E = never,\r\n  M = never\r\n> extends BaseActionCreator<P, T, M, E> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with `Args` will return\r\n   * an Action with a payload of type `P` and (depending on the `PrepareAction`\r\n   * method used) a `meta`- and `error` property of types `M` and `E` respectively.\r\n   */\r\n  (...args: Args): PayloadAction<P, T, M, E>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that takes an optional payload of type `P`.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithOptionalPayload<P, T extends string = string>\r\n  extends BaseActionCreator<P, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `P`.\r\n   * Calling it without an argument will return a PayloadAction with a payload of `undefined`.\r\n   */\r\n  (payload?: P): PayloadAction<P, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that takes no payload.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithoutPayload<T extends string = string>\r\n  extends BaseActionCreator<undefined, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `undefined`\r\n   */\r\n  (): PayloadAction<undefined, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` that requires a payload of type P.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithPayload<P, T extends string = string>\r\n  extends BaseActionCreator<P, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload of `P`\r\n   */\r\n  (payload: P): PayloadAction<P, T>\r\n}\r\n\r\n/**\r\n * An action creator of type `T` whose `payload` type could not be inferred. Accepts everything as `payload`.\r\n *\r\n * @inheritdoc {redux#ActionCreator}\r\n *\r\n * @public\r\n */\r\nexport interface ActionCreatorWithNonInferrablePayload<\r\n  T extends string = string\r\n> extends BaseActionCreator<unknown, T> {\r\n  /**\r\n   * Calling this {@link redux#ActionCreator} with an argument will\r\n   * return a {@link PayloadAction} of type `T` with a payload\r\n   * of exactly the type of the argument.\r\n   */\r\n  <PT extends unknown>(payload: PT): PayloadAction<PT, T>\r\n}\r\n\r\n/**\r\n * An action creator that produces actions with a `payload` attribute.\r\n *\r\n * @typeParam P the `payload` type\r\n * @typeParam T the `type` of the resulting action\r\n * @typeParam PA if the resulting action is preprocessed by a `prepare` method, the signature of said method.\r\n *\r\n * @public\r\n */\r\nexport type PayloadActionCreator<\r\n  P = void,\r\n  T extends string = string,\r\n  PA extends PrepareAction<P> | void = void\r\n> = IfPrepareActionMethodProvided<\r\n  PA,\r\n  _ActionCreatorWithPreparedPayload<PA, T>,\r\n  // else\r\n  IsAny<\r\n    P,\r\n    ActionCreatorWithPayload<any, T>,\r\n    IsUnknownOrNonInferrable<\r\n      P,\r\n      ActionCreatorWithNonInferrablePayload<T>,\r\n      // else\r\n      IfVoid<\r\n        P,\r\n        ActionCreatorWithoutPayload<T>,\r\n        // else\r\n        IfMaybeUndefined<\r\n          P,\r\n          ActionCreatorWithOptionalPayload<P, T>,\r\n          // else\r\n          ActionCreatorWithPayload<P, T>\r\n        >\r\n      >\r\n    >\r\n  >\r\n>\r\n\r\n/**\r\n * A utility function to create an action creator for the given action type\r\n * string. The action creator accepts a single argument, which will be included\r\n * in the action object as a field called payload. The action creator function\r\n * will also have its toString() overriden so that it returns the action type,\r\n * allowing it to be used in reducer logic that is looking for that action type.\r\n *\r\n * @param type The action type to use for created actions.\r\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\r\n *                If this is given, the resulting action creator will pass it's arguments to this method to calculate payload & meta.\r\n *\r\n * @public\r\n */\r\nexport function createAction<P = void, T extends string = string>(\r\n  type: T\r\n): PayloadActionCreator<P, T>\r\n\r\n/**\r\n * A utility function to create an action creator for the given action type\r\n * string. The action creator accepts a single argument, which will be included\r\n * in the action object as a field called payload. The action creator function\r\n * will also have its toString() overriden so that it returns the action type,\r\n * allowing it to be used in reducer logic that is looking for that action type.\r\n *\r\n * @param type The action type to use for created actions.\r\n * @param prepare (optional) a method that takes any number of arguments and returns { payload } or { payload, meta }.\r\n *                If this is given, the resulting action creator will pass it's arguments to this method to calculate payload & meta.\r\n *\r\n * @public\r\n */\r\nexport function createAction<\r\n  PA extends PrepareAction<any>,\r\n  T extends string = string\r\n>(\r\n  type: T,\r\n  prepareAction: PA\r\n): PayloadActionCreator<ReturnType<PA>['payload'], T, PA>\r\n\r\nexport function createAction(type: string, prepareAction?: Function): any {\r\n  function actionCreator(...args: any[]) {\r\n    if (prepareAction) {\r\n      let prepared = prepareAction(...args)\r\n      if (!prepared) {\r\n        throw new Error('prepareAction did not return an object')\r\n      }\r\n\r\n      return {\r\n        type,\r\n        payload: prepared.payload,\r\n        ...('meta' in prepared && { meta: prepared.meta }),\r\n        ...('error' in prepared && { error: prepared.error })\r\n      }\r\n    }\r\n    return { type, payload: args[0] }\r\n  }\r\n\r\n  actionCreator.toString = () => `${type}`\r\n\r\n  actionCreator.type = type\r\n\r\n  actionCreator.match = (action: Action<unknown>): action is PayloadAction =>\r\n    action.type === type\r\n\r\n  return actionCreator\r\n}\r\n\r\nexport function isFSA(\r\n  action: unknown\r\n): action is {\r\n  type: string\r\n  payload?: unknown\r\n  error?: unknown\r\n  meta?: unknown\r\n} {\r\n  return (\r\n    isPlainObject(action) &&\r\n    typeof (action as any).type === 'string' &&\r\n    Object.keys(action).every(isValidKey)\r\n  )\r\n}\r\n\r\nfunction isValidKey(key: string) {\r\n  return ['type', 'payload', 'error', 'meta'].indexOf(key) > -1\r\n}\r\n\r\n/**\r\n * Returns the action type of the actions created by the passed\r\n * `createAction()`-generated action creator (arbitrary action creators\r\n * are not supported).\r\n *\r\n * @param action The action creator whose action type to get.\r\n * @returns The action type used by the action creator.\r\n *\r\n * @public\r\n */\r\nexport function getType<T extends string>(\r\n  actionCreator: PayloadActionCreator<any, T>\r\n): T {\r\n  return `${actionCreator}` as T\r\n}\r\n\r\n// helper types for more readable typings\r\n\r\ntype IfPrepareActionMethodProvided<\r\n  PA extends PrepareAction<any> | void,\r\n  True,\r\n  False\r\n> = PA extends (...args: any[]) => any ? True : False\r\n","import { Action } from 'redux'\r\nimport { CaseReducer, CaseReducers } from './createReducer'\r\n\r\nexport interface TypedActionCreator<Type extends string> {\r\n  (...args: any[]): Action<Type>\r\n  type: Type\r\n}\r\n\r\n/**\r\n * A builder for an action <-> reducer map.\r\n *\r\n * @public\r\n */\r\nexport interface ActionReducerMapBuilder<State> {\r\n  /**\r\n   * Add a case reducer for actions created by this action creator.\r\n   * @param actionCreator\r\n   * @param reducer\r\n   */\r\n  addCase<ActionCreator extends TypedActionCreator<string>>(\r\n    actionCreator: ActionCreator,\r\n    reducer: CaseReducer<State, ReturnType<ActionCreator>>\r\n  ): ActionReducerMapBuilder<State>\r\n  /**\r\n   * Add a case reducer for actions with the specified type.\r\n   * @param type\r\n   * @param reducer\r\n   */\r\n  addCase<Type extends string, A extends Action<Type>>(\r\n    type: Type,\r\n    reducer: CaseReducer<State, A>\r\n  ): ActionReducerMapBuilder<State>\r\n}\r\n\r\nexport function executeReducerBuilderCallback<S>(\r\n  builderCallback: (builder: ActionReducerMapBuilder<S>) => void\r\n): CaseReducers<S, any> {\r\n  const actionsMap: CaseReducers<S, any> = {}\r\n  const builder = {\r\n    addCase(\r\n      typeOrActionCreator: string | TypedActionCreator<any>,\r\n      reducer: CaseReducer<S>\r\n    ) {\r\n      const type =\r\n        typeof typeOrActionCreator === 'string'\r\n          ? typeOrActionCreator\r\n          : typeOrActionCreator.type\r\n      if (type in actionsMap) {\r\n        throw new Error(\r\n          'addCase cannot be called with two reducers for the same action type'\r\n        )\r\n      }\r\n      actionsMap[type] = reducer\r\n      return builder\r\n    }\r\n  }\r\n  builderCallback(builder)\r\n  return actionsMap\r\n}\r\n","import createNextState, { Draft, isDraft } from 'immer'\r\nimport { AnyAction, Action, Reducer } from 'redux'\r\nimport {\r\n  executeReducerBuilderCallback,\r\n  ActionReducerMapBuilder\r\n} from './mapBuilders'\r\n\r\n/**\r\n * Defines a mapping from action types to corresponding action object shapes.\r\n *\r\n * @deprecated This should not be used manually - it is only used for internal\r\n *             inference purposes and should not have any further value.\r\n *             It might be removed in the future.\r\n * @public\r\n */\r\nexport type Actions<T extends keyof any = string> = Record<T, Action>\r\n\r\n/**\r\n * An *case reducer* is a reducer function for a specific action type. Case\r\n * reducers can be composed to full reducers using `createReducer()`.\r\n *\r\n * Unlike a normal Redux reducer, a case reducer is never called with an\r\n * `undefined` state to determine the initial state. Instead, the initial\r\n * state is explicitly specified as an argument to `createReducer()`.\r\n *\r\n * In addition, a case reducer can choose to mutate the passed-in `state`\r\n * value directly instead of returning a new state. This does not actually\r\n * cause the store state to be mutated directly; instead, thanks to\r\n * [immer](https://github.com/mweststrate/immer), the mutations are\r\n * translated to copy operations that result in a new state.\r\n *\r\n * @public\r\n */\r\nexport type CaseReducer<S = any, A extends Action = AnyAction> = (\r\n  state: Draft<S>,\r\n  action: A\r\n) => S | void\r\n\r\n/**\r\n * A mapping from action types to case reducers for `createReducer()`.\r\n *\r\n * @deprecated This should not be used manually - it is only used\r\n *             for internal inference purposes and using it manually\r\n *             would lead to type erasure.\r\n *             It might be removed in the future.\r\n * @public\r\n */\r\nexport type CaseReducers<S, AS extends Actions> = {\r\n  [T in keyof AS]: AS[T] extends Action ? CaseReducer<S, AS[T]> : void\r\n}\r\n\r\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n *\r\n * @param initialState The initial state to be returned by the reducer.\r\n * @param actionsMap A mapping from action types to action-type-specific\r\n *   case reducers.\r\n *\r\n * @public\r\n */\r\nexport function createReducer<\r\n  S,\r\n  CR extends CaseReducers<S, any> = CaseReducers<S, any>\r\n>(initialState: S, actionsMap: CR): Reducer<S>\r\n/**\r\n * A utility function that allows defining a reducer as a mapping from action\r\n * type to *case reducer* functions that handle these action types. The\r\n * reducer's initial state is passed as the first argument.\r\n *\r\n * The body of every case reducer is implicitly wrapped with a call to\r\n * `produce()` from the [immer](https://github.com/mweststrate/immer) library.\r\n * This means that rather than returning a new state object, you can also\r\n * mutate the passed-in state object directly; these mutations will then be\r\n * automatically and efficiently translated into copies, giving you both\r\n * convenience and immutability.\r\n * @param initialState The initial state to be returned by the reducer.\r\n * @param builderCallback A callback that receives a *builder* object to define\r\n *   case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n *\r\n * @public\r\n */\r\nexport function createReducer<S>(\r\n  initialState: S,\r\n  builderCallback: (builder: ActionReducerMapBuilder<S>) => void\r\n): Reducer<S>\r\n\r\nexport function createReducer<S>(\r\n  initialState: S,\r\n  mapOrBuilderCallback:\r\n    | CaseReducers<S, any>\r\n    | ((builder: ActionReducerMapBuilder<S>) => void)\r\n): Reducer<S> {\r\n  let actionsMap =\r\n    typeof mapOrBuilderCallback === 'function'\r\n      ? executeReducerBuilderCallback(mapOrBuilderCallback)\r\n      : mapOrBuilderCallback\r\n\r\n  return function(state = initialState, action): S {\r\n    const caseReducer = actionsMap[action.type]\r\n    if (caseReducer) {\r\n      if (isDraft(state)) {\r\n        // we must already be inside a `createNextState` call, likely because\r\n        // this is being wrapped in `createReducer`, `createSlice`, or nested\r\n        // inside an existing draft. It's safe to just pass the draft to the mutator.\r\n        const draft = state as Draft<S> // We can aassume this is already a draft\r\n        return caseReducer(draft, action) || state\r\n      } else {\r\n        // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\r\n        // than an Immutable<S>, and TypeScript cannot find out how to reconcile\r\n        // these two types.\r\n        return createNextState(state, (draft: Draft<S>) => {\r\n          return caseReducer(draft, action)\r\n        })\r\n      }\r\n    }\r\n\r\n    return state\r\n  }\r\n}\r\n","import { Reducer } from 'redux'\r\nimport {\r\n  ActionCreatorWithoutPayload,\r\n  createAction,\r\n  PayloadAction,\r\n  PayloadActionCreator,\r\n  PrepareAction,\r\n  _ActionCreatorWithPreparedPayload\r\n} from './createAction'\r\nimport { CaseReducer, CaseReducers, createReducer } from './createReducer'\r\nimport {\r\n  ActionReducerMapBuilder,\r\n  executeReducerBuilderCallback\r\n} from './mapBuilders'\r\nimport { Omit } from './tsHelpers'\r\n\r\n/**\r\n * An action creator attached to a slice.\r\n *\r\n * @deprecated please use PayloadActionCreator directly\r\n *\r\n * @public\r\n */\r\nexport type SliceActionCreator<P> = PayloadActionCreator<P>\r\n\r\n/**\r\n * The return value of `createSlice`\r\n *\r\n * @public\r\n */\r\nexport interface Slice<\r\n  State = any,\r\n  CaseReducers extends SliceCaseReducers<State> = SliceCaseReducers<State>,\r\n  Name extends string = string\r\n> {\r\n  /**\r\n   * The slice name.\r\n   */\r\n  name: Name\r\n\r\n  /**\r\n   * The slice's reducer.\r\n   */\r\n  reducer: Reducer<State>\r\n\r\n  /**\r\n   * Action creators for the types of actions that are handled by the slice\r\n   * reducer.\r\n   */\r\n  actions: CaseReducerActions<CaseReducers>\r\n\r\n  /**\r\n   * The individual case reducer functions that were passed in the `reducers` parameter.\r\n   * This enables reuse and testing if they were defined inline when calling `createSlice`.\r\n   */\r\n  caseReducers: SliceDefinedCaseReducers<CaseReducers>\r\n}\r\n\r\n/**\r\n * Options for `createSlice()`.\r\n *\r\n * @public\r\n */\r\nexport interface CreateSliceOptions<\r\n  State = any,\r\n  CR extends SliceCaseReducers<State> = SliceCaseReducers<State>,\r\n  Name extends string = string\r\n> {\r\n  /**\r\n   * The slice's name. Used to namespace the generated action types.\r\n   */\r\n  name: Name\r\n\r\n  /**\r\n   * The initial state to be returned by the slice reducer.\r\n   */\r\n  initialState: State\r\n\r\n  /**\r\n   * A mapping from action types to action-type-specific *case reducer*\r\n   * functions. For every action type, a matching action creator will be\r\n   * generated using `createAction()`.\r\n   */\r\n  reducers: ValidateSliceCaseReducers<State, CR>\r\n\r\n  /**\r\n   * A mapping from action types to action-type-specific *case reducer*\r\n   * functions. These reducers should have existing action types used\r\n   * as the keys, and action creators will _not_ be generated.\r\n   * Alternatively, a callback that receives a *builder* object to define\r\n   * case reducers via calls to `builder.addCase(actionCreatorOrType, reducer)`.\r\n   */\r\n  extraReducers?:\r\n    | CaseReducers<NoInfer<State>, any>\r\n    | ((builder: ActionReducerMapBuilder<NoInfer<State>>) => void)\r\n}\r\n\r\n/**\r\n * A CaseReducer with a `prepare` method.\r\n *\r\n * @public\r\n */\r\nexport type CaseReducerWithPrepare<State, Action extends PayloadAction> = {\r\n  reducer: CaseReducer<State, Action>\r\n  prepare: PrepareAction<Action['payload']>\r\n}\r\n\r\n/**\r\n * The type describing a slice's `reducers` option.\r\n *\r\n * @public\r\n */\r\nexport type SliceCaseReducers<State> = {\r\n  [K: string]:\r\n    | CaseReducer<State, PayloadAction<any>>\r\n    | CaseReducerWithPrepare<State, PayloadAction<any, string, any, any>>\r\n}\r\n\r\n/**\r\n * Derives the slice's `actions` property from the `reducers` options\r\n *\r\n * @public\r\n */\r\nexport type CaseReducerActions<CaseReducers extends SliceCaseReducers<any>> = {\r\n  [Type in keyof CaseReducers]: CaseReducers[Type] extends { prepare: any }\r\n    ? ActionCreatorForCaseReducerWithPrepare<CaseReducers[Type]>\r\n    : ActionCreatorForCaseReducer<CaseReducers[Type]>\r\n}\r\n\r\n/**\r\n * Get a `PayloadActionCreator` type for a passed `CaseReducerWithPrepare`\r\n *\r\n * @internal\r\n */\r\ntype ActionCreatorForCaseReducerWithPrepare<\r\n  CR extends { prepare: any }\r\n> = _ActionCreatorWithPreparedPayload<CR['prepare'], string>\r\n\r\n/**\r\n * Get a `PayloadActionCreator` type for a passed `CaseReducer`\r\n *\r\n * @internal\r\n */\r\ntype ActionCreatorForCaseReducer<CR> = CR extends (\r\n  state: any,\r\n  action: infer Action\r\n) => any\r\n  ? Action extends { payload: infer P }\r\n    ? PayloadActionCreator<P>\r\n    : ActionCreatorWithoutPayload\r\n  : ActionCreatorWithoutPayload\r\n\r\n/**\r\n * Extracts the CaseReducers out of a `reducers` object, even if they are\r\n * tested into a `CaseReducerWithPrepare`.\r\n *\r\n * @internal\r\n */\r\ntype SliceDefinedCaseReducers<CaseReducers extends SliceCaseReducers<any>> = {\r\n  [Type in keyof CaseReducers]: CaseReducers[Type] extends {\r\n    reducer: infer Reducer\r\n  }\r\n    ? Reducer\r\n    : CaseReducers[Type]\r\n}\r\n\r\n/**\r\n * Helper type. Passes T out again, but boxes it in a way that it cannot\r\n * \"widen\" the type by accident if it is a generic that should be inferred\r\n * from elsewhere.\r\n *\r\n * @internal\r\n */\r\ntype NoInfer<T> = [T][T extends any ? 0 : never]\r\n\r\n/**\r\n * Used on a SliceCaseReducers object.\r\n * Ensures that if a CaseReducer is a `CaseReducerWithPrepare`, that\r\n * the `reducer` and the `prepare` function use the same type of `payload`.\r\n *\r\n * Might do additional such checks in the future.\r\n *\r\n * This type is only ever useful if you want to write your own wrapper around\r\n * `createSlice`. Please don't use it otherwise!\r\n *\r\n * @public\r\n */\r\nexport type ValidateSliceCaseReducers<\r\n  S,\r\n  ACR extends SliceCaseReducers<S>\r\n> = ACR &\r\n  {\r\n    [T in keyof ACR]: ACR[T] extends {\r\n      reducer(s: S, action?: infer A): any\r\n    }\r\n      ? {\r\n          prepare(...a: never[]): Omit<A, 'type'>\r\n        }\r\n      : {}\r\n  }\r\n\r\nfunction getType(slice: string, actionKey: string): string {\r\n  return `${slice}/${actionKey}`\r\n}\r\n\r\n/**\r\n * A function that accepts an initial state, an object full of reducer\r\n * functions, and a \"slice name\", and automatically generates\r\n * action creators and action types that correspond to the\r\n * reducers and state.\r\n *\r\n * The `reducer` argument is passed to `createReducer()`.\r\n *\r\n * @public\r\n */\r\nexport function createSlice<\r\n  State,\r\n  CaseReducers extends SliceCaseReducers<State>,\r\n  Name extends string = string\r\n>(\r\n  options: CreateSliceOptions<State, CaseReducers, Name>\r\n): Slice<State, CaseReducers, Name> {\r\n  const { name, initialState } = options\r\n  if (!name) {\r\n    throw new Error('`name` is a required option for createSlice')\r\n  }\r\n  const reducers = options.reducers || {}\r\n  const extraReducers =\r\n    typeof options.extraReducers === 'undefined'\r\n      ? {}\r\n      : typeof options.extraReducers === 'function'\r\n      ? executeReducerBuilderCallback(options.extraReducers)\r\n      : options.extraReducers\r\n\r\n  const reducerNames = Object.keys(reducers)\r\n\r\n  const sliceCaseReducersByName: Record<string, CaseReducer> = {}\r\n  const sliceCaseReducersByType: Record<string, CaseReducer> = {}\r\n  const actionCreators: Record<string, Function> = {}\r\n\r\n  reducerNames.forEach(reducerName => {\r\n    const maybeReducerWithPrepare = reducers[reducerName]\r\n    const type = getType(name, reducerName)\r\n\r\n    let caseReducer: CaseReducer<State, any>\r\n    let prepareCallback: PrepareAction<any> | undefined\r\n\r\n    if ('reducer' in maybeReducerWithPrepare) {\r\n      caseReducer = maybeReducerWithPrepare.reducer\r\n      prepareCallback = maybeReducerWithPrepare.prepare\r\n    } else {\r\n      caseReducer = maybeReducerWithPrepare\r\n    }\r\n\r\n    sliceCaseReducersByName[reducerName] = caseReducer\r\n    sliceCaseReducersByType[type] = caseReducer\r\n    actionCreators[reducerName] = prepareCallback\r\n      ? createAction(type, prepareCallback)\r\n      : createAction(type)\r\n  })\r\n\r\n  const finalCaseReducers = { ...extraReducers, ...sliceCaseReducersByType }\r\n  const reducer = createReducer(initialState, finalCaseReducers as any)\r\n\r\n  return {\r\n    name,\r\n    reducer,\r\n    actions: actionCreators as any,\r\n    caseReducers: sliceCaseReducersByName as any\r\n  }\r\n}\r\n","import { EntityState } from './models'\r\n\r\nexport function getInitialEntityState<V>(): EntityState<V> {\r\n  return {\r\n    ids: [],\r\n    entities: {}\r\n  }\r\n}\r\n\r\nexport function createInitialStateFactory<V>() {\r\n  function getInitialState(): EntityState<V>\r\n  function getInitialState<S extends object>(\r\n    additionalState: S\r\n  ): EntityState<V> & S\r\n  function getInitialState(additionalState: any = {}): any {\r\n    return Object.assign(getInitialEntityState(), additionalState)\r\n  }\r\n\r\n  return { getInitialState }\r\n}\r\n","import { createSelector } from 'reselect'\r\nimport { EntityState, EntitySelectors, Dictionary, EntityId } from './models'\r\n\r\nexport function createSelectorsFactory<T>() {\r\n  function getSelectors(): EntitySelectors<T, EntityState<T>>\r\n  function getSelectors<V>(\r\n    selectState: (state: V) => EntityState<T>\r\n  ): EntitySelectors<T, V>\r\n  function getSelectors(\r\n    selectState?: (state: any) => EntityState<T>\r\n  ): EntitySelectors<T, any> {\r\n    const selectIds = (state: any) => state.ids\r\n\r\n    const selectEntities = (state: EntityState<T>) => state.entities\r\n\r\n    const selectAll = createSelector(\r\n      selectIds,\r\n      selectEntities,\r\n      (ids: T[], entities: Dictionary<T>): any =>\r\n        ids.map((id: any) => (entities as any)[id])\r\n    )\r\n\r\n    const selectId = (_: any, id: EntityId) => id\r\n\r\n    const selectById = (entities: Dictionary<T>, id: EntityId) => entities[id]\r\n\r\n    const selectTotal = createSelector(selectIds, ids => ids.length)\r\n\r\n    if (!selectState) {\r\n      return {\r\n        selectIds,\r\n        selectEntities,\r\n        selectAll,\r\n        selectTotal,\r\n        selectById: createSelector(selectEntities, selectId, selectById)\r\n      }\r\n    }\r\n\r\n    const selectGlobalizedEntities = createSelector(selectState, selectEntities)\r\n\r\n    return {\r\n      selectIds: createSelector(selectState, selectIds),\r\n      selectEntities: selectGlobalizedEntities,\r\n      selectAll: createSelector(selectState, selectAll),\r\n      selectTotal: createSelector(selectState, selectTotal),\r\n      selectById: createSelector(selectGlobalizedEntities, selectId, selectById)\r\n    }\r\n  }\r\n\r\n  return { getSelectors }\r\n}\r\n","import createNextState, { isDraft } from 'immer'\r\nimport { EntityState, PreventAny } from './models'\r\nimport { PayloadAction, isFSA } from '../createAction'\r\n\r\nexport function createSingleArgumentStateOperator<V>(\r\n  mutator: (state: EntityState<V>) => void\r\n) {\r\n  const operator = createStateOperator((_: undefined, state: EntityState<V>) =>\r\n    mutator(state)\r\n  )\r\n\r\n  return function operation<S extends EntityState<V>>(\r\n    state: PreventAny<S, V>\r\n  ): S {\r\n    return operator(state as S, undefined)\r\n  }\r\n}\r\n\r\nexport function createStateOperator<V, R>(\r\n  mutator: (arg: R, state: EntityState<V>) => void\r\n) {\r\n  return function operation<S extends EntityState<V>>(\r\n    state: S,\r\n    arg: R | PayloadAction<R>\r\n  ): S {\r\n    function isPayloadActionArgument(\r\n      arg: R | PayloadAction<R>\r\n    ): arg is PayloadAction<R> {\r\n      return isFSA(arg)\r\n    }\r\n\r\n    const runMutator = (draft: EntityState<V>) => {\r\n      if (isPayloadActionArgument(arg)) {\r\n        mutator(arg.payload, draft)\r\n      } else {\r\n        mutator(arg, draft)\r\n      }\r\n    }\r\n\r\n    if (isDraft(state)) {\r\n      // we must already be inside a `createNextState` call, likely because\r\n      // this is being wrapped in `createReducer` or `createSlice`.\r\n      // It's safe to just pass the draft to the mutator.\r\n      runMutator(state)\r\n\r\n      // since it's a draft, we'll just return it\r\n      return state\r\n    } else {\r\n      // @ts-ignore createNextState() produces an Immutable<Draft<S>> rather\r\n      // than an Immutable<S>, and TypeScript cannot find out how to reconcile\r\n      // these two types.\r\n      return createNextState(state, runMutator)\r\n    }\r\n  }\r\n}\r\n","import { IdSelector } from './models'\r\n\r\nexport function selectIdValue<T>(entity: T, selectId: IdSelector<T>) {\r\n  const key = selectId(entity)\r\n\r\n  if (process.env.NODE_ENV !== 'production' && key === undefined) {\r\n    console.warn(\r\n      'The entity passed to the `selectId` implementation returned undefined.',\r\n      'You should probably provide your own `selectId` implementation.',\r\n      'The entity that was passed:',\r\n      entity,\r\n      'The `selectId` implementation:',\r\n      selectId.toString()\r\n    )\r\n  }\r\n\r\n  return key\r\n}\r\n","import {\r\n  EntityState,\r\n  EntityStateAdapter,\r\n  IdSelector,\r\n  Update,\r\n  EntityId\r\n} from './models'\r\nimport {\r\n  createStateOperator,\r\n  createSingleArgumentStateOperator\r\n} from './state_adapter'\r\nimport { selectIdValue } from './utils'\r\n\r\nexport function createUnsortedStateAdapter<T>(\r\n  selectId: IdSelector<T>\r\n): EntityStateAdapter<T> {\r\n  type R = EntityState<T>\r\n\r\n  function addOneMutably(entity: T, state: EntityState<T>): void {\r\n    const key = selectIdValue(entity, selectId)\r\n\r\n    if (key in state.entities) {\r\n      return\r\n    }\r\n\r\n    state.ids.push(key)\r\n    state.entities[key] = entity\r\n  }\r\n\r\n  function addManyMutably(entities: T[] | Record<EntityId, T>, state: R): void {\r\n    if (!Array.isArray(entities)) {\r\n      entities = Object.values(entities)\r\n    }\r\n\r\n    for (const entity of entities) {\r\n      addOneMutably(entity, state)\r\n    }\r\n  }\r\n\r\n  function setAllMutably(entities: T[] | Record<EntityId, T>, state: R): void {\r\n    if (!Array.isArray(entities)) {\r\n      entities = Object.values(entities)\r\n    }\r\n\r\n    state.ids = []\r\n    state.entities = {}\r\n\r\n    addManyMutably(entities, state)\r\n  }\r\n\r\n  function removeOneMutably(key: EntityId, state: R): void {\r\n    return removeManyMutably([key], state)\r\n  }\r\n\r\n  function removeManyMutably(keys: EntityId[], state: R): void {\r\n    let didMutate = false\r\n\r\n    keys.forEach(key => {\r\n      if (key in state.entities) {\r\n        delete state.entities[key]\r\n        didMutate = true\r\n      }\r\n    })\r\n\r\n    if (didMutate) {\r\n      state.ids = state.ids.filter(id => id in state.entities)\r\n    }\r\n  }\r\n\r\n  function removeAllMutably(state: R): void {\r\n    Object.assign(state, {\r\n      ids: [],\r\n      entities: {}\r\n    })\r\n  }\r\n\r\n  function takeNewKey(\r\n    keys: { [id: string]: EntityId },\r\n    update: Update<T>,\r\n    state: R\r\n  ): boolean {\r\n    const original = state.entities[update.id]\r\n    const updated: T = Object.assign({}, original, update.changes)\r\n    const newKey = selectIdValue(updated, selectId)\r\n    const hasNewKey = newKey !== update.id\r\n\r\n    if (hasNewKey) {\r\n      keys[update.id] = newKey\r\n      delete state.entities[update.id]\r\n    }\r\n\r\n    state.entities[newKey] = updated\r\n\r\n    return hasNewKey\r\n  }\r\n\r\n  function updateOneMutably(update: Update<T>, state: R): void {\r\n    return updateManyMutably([update], state)\r\n  }\r\n\r\n  function updateManyMutably(updates: Update<T>[], state: R): void {\r\n    const newKeys: { [id: string]: EntityId } = {}\r\n\r\n    const updatesPerEntity: { [id: string]: Update<T> } = {}\r\n\r\n    updates.forEach(update => {\r\n      // Only apply updates to entities that currently exist\r\n      if (update.id in state.entities) {\r\n        // If there are multiple updates to one entity, merge them together\r\n        updatesPerEntity[update.id] = {\r\n          // Spreads ignore falsy values, so this works even if there isn't\r\n          // an existing update already at this key\r\n          ...updatesPerEntity[update.id],\r\n          ...update\r\n        }\r\n      }\r\n    })\r\n\r\n    updates = Object.values(updatesPerEntity)\r\n\r\n    const didMutateEntities = updates.length > 0\r\n\r\n    if (didMutateEntities) {\r\n      const didMutateIds =\r\n        updates.filter(update => takeNewKey(newKeys, update, state)).length > 0\r\n\r\n      if (didMutateIds) {\r\n        state.ids = state.ids.map(id => newKeys[id] || id)\r\n      }\r\n    }\r\n  }\r\n\r\n  function upsertOneMutably(entity: T, state: R): void {\r\n    return upsertManyMutably([entity], state)\r\n  }\r\n\r\n  function upsertManyMutably(\r\n    entities: T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    if (!Array.isArray(entities)) {\r\n      entities = Object.values(entities)\r\n    }\r\n\r\n    const added: T[] = []\r\n    const updated: Update<T>[] = []\r\n\r\n    for (const entity of entities) {\r\n      const id = selectIdValue(entity, selectId)\r\n      if (id in state.entities) {\r\n        updated.push({ id, changes: entity })\r\n      } else {\r\n        added.push(entity)\r\n      }\r\n    }\r\n\r\n    updateManyMutably(updated, state)\r\n    addManyMutably(added, state)\r\n  }\r\n\r\n  return {\r\n    removeAll: createSingleArgumentStateOperator(removeAllMutably),\r\n    addOne: createStateOperator(addOneMutably),\r\n    addMany: createStateOperator(addManyMutably),\r\n    setAll: createStateOperator(setAllMutably),\r\n    updateOne: createStateOperator(updateOneMutably),\r\n    updateMany: createStateOperator(updateManyMutably),\r\n    upsertOne: createStateOperator(upsertOneMutably),\r\n    upsertMany: createStateOperator(upsertManyMutably),\r\n    removeOne: createStateOperator(removeOneMutably),\r\n    removeMany: createStateOperator(removeManyMutably)\r\n  }\r\n}\r\n","import {\r\n  EntityState,\r\n  IdSelector,\r\n  Comparer,\r\n  EntityStateAdapter,\r\n  Update,\r\n  EntityId\r\n} from './models'\r\nimport { createStateOperator } from './state_adapter'\r\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter'\r\nimport { selectIdValue } from './utils'\r\n\r\nexport function createSortedStateAdapter<T>(\r\n  selectId: IdSelector<T>,\r\n  sort: Comparer<T>\r\n): EntityStateAdapter<T> {\r\n  type R = EntityState<T>\r\n\r\n  const { removeOne, removeMany, removeAll } = createUnsortedStateAdapter(\r\n    selectId\r\n  )\r\n\r\n  function addOneMutably(entity: T, state: R): void {\r\n    return addManyMutably([entity], state)\r\n  }\r\n\r\n  function addManyMutably(\r\n    newModels: T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    if (!Array.isArray(newModels)) {\r\n      newModels = Object.values(newModels)\r\n    }\r\n\r\n    const models = newModels.filter(\r\n      model => !(selectIdValue(model, selectId) in state.entities)\r\n    )\r\n\r\n    if (models.length !== 0) {\r\n      merge(models, state)\r\n    }\r\n  }\r\n\r\n  function setAllMutably(models: T[] | Record<EntityId, T>, state: R): void {\r\n    if (!Array.isArray(models)) {\r\n      models = Object.values(models)\r\n    }\r\n    state.entities = {}\r\n    state.ids = []\r\n\r\n    addManyMutably(models, state)\r\n  }\r\n\r\n  function updateOneMutably(update: Update<T>, state: R): void {\r\n    return updateManyMutably([update], state)\r\n  }\r\n\r\n  function takeUpdatedModel(models: T[], update: Update<T>, state: R): boolean {\r\n    if (!(update.id in state.entities)) {\r\n      return false\r\n    }\r\n\r\n    const original = state.entities[update.id]\r\n    const updated = Object.assign({}, original, update.changes)\r\n    const newKey = selectIdValue(updated, selectId)\r\n\r\n    delete state.entities[update.id]\r\n\r\n    models.push(updated)\r\n\r\n    return newKey !== update.id\r\n  }\r\n\r\n  function updateManyMutably(updates: Update<T>[], state: R): void {\r\n    const models: T[] = []\r\n\r\n    updates.forEach(update => takeUpdatedModel(models, update, state))\r\n\r\n    if (models.length !== 0) {\r\n      merge(models, state)\r\n    }\r\n  }\r\n\r\n  function upsertOneMutably(entity: T, state: R): void {\r\n    return upsertManyMutably([entity], state)\r\n  }\r\n\r\n  function upsertManyMutably(\r\n    entities: T[] | Record<EntityId, T>,\r\n    state: R\r\n  ): void {\r\n    if (!Array.isArray(entities)) {\r\n      entities = Object.values(entities)\r\n    }\r\n\r\n    const added: T[] = []\r\n    const updated: Update<T>[] = []\r\n\r\n    for (const entity of entities) {\r\n      const id = selectIdValue(entity, selectId)\r\n      if (id in state.entities) {\r\n        updated.push({ id, changes: entity })\r\n      } else {\r\n        added.push(entity)\r\n      }\r\n    }\r\n\r\n    updateManyMutably(updated, state)\r\n    addManyMutably(added, state)\r\n  }\r\n\r\n  function areArraysEqual(a: unknown[], b: unknown[]) {\r\n    if (a.length !== b.length) {\r\n      return false\r\n    }\r\n\r\n    for (let i = 0; i < a.length && i < b.length; i++) {\r\n      if (a[i] === b[i]) {\r\n        continue\r\n      }\r\n      return false\r\n    }\r\n    return true\r\n  }\r\n\r\n  function merge(models: T[], state: R): void {\r\n    models.sort(sort)\r\n\r\n    // Insert/overwrite all new/updated\r\n    models.forEach(model => {\r\n      state.entities[selectId(model)] = model\r\n    })\r\n\r\n    const allEntities = Object.values(state.entities) as T[]\r\n    allEntities.sort(sort)\r\n\r\n    const newSortedIds = allEntities.map(selectId)\r\n    const { ids } = state\r\n\r\n    if (!areArraysEqual(ids, newSortedIds)) {\r\n      state.ids = newSortedIds\r\n    }\r\n  }\r\n\r\n  return {\r\n    removeOne,\r\n    removeMany,\r\n    removeAll,\r\n    addOne: createStateOperator(addOneMutably),\r\n    updateOne: createStateOperator(updateOneMutably),\r\n    upsertOne: createStateOperator(upsertOneMutably),\r\n    setAll: createStateOperator(setAllMutably),\r\n    addMany: createStateOperator(addManyMutably),\r\n    updateMany: createStateOperator(updateManyMutably),\r\n    upsertMany: createStateOperator(upsertManyMutably)\r\n  }\r\n}\r\n","import { EntityDefinition, Comparer, IdSelector, EntityAdapter } from './models'\r\nimport { createInitialStateFactory } from './entity_state'\r\nimport { createSelectorsFactory } from './state_selectors'\r\nimport { createSortedStateAdapter } from './sorted_state_adapter'\r\nimport { createUnsortedStateAdapter } from './unsorted_state_adapter'\r\n\r\n/**\r\n *\r\n * @param options\r\n *\r\n * @public\r\n */\r\nexport function createEntityAdapter<T>(\r\n  options: {\r\n    selectId?: IdSelector<T>\r\n    sortComparer?: false | Comparer<T>\r\n  } = {}\r\n): EntityAdapter<T> {\r\n  const { selectId, sortComparer }: EntityDefinition<T> = {\r\n    sortComparer: false,\r\n    selectId: (instance: any) => instance.id,\r\n    ...options\r\n  }\r\n\r\n  const stateFactory = createInitialStateFactory<T>()\r\n  const selectorsFactory = createSelectorsFactory<T>()\r\n  const stateAdapter = sortComparer\r\n    ? createSortedStateAdapter(selectId, sortComparer)\r\n    : createUnsortedStateAdapter(selectId)\r\n\r\n  return {\r\n    selectId,\r\n    sortComparer,\r\n    ...stateFactory,\r\n    ...selectorsFactory,\r\n    ...stateAdapter\r\n  }\r\n}\r\n","// A type of promise-like that resolves synchronously and supports only one observer\nexport const _Pact = /*#__PURE__*/(function() {\n\tfunction _Pact() {}\n\t_Pact.prototype.then = function(onFulfilled, onRejected) {\n\t\tconst result = new _Pact();\n\t\tconst state = this.s;\n\t\tif (state) {\n\t\t\tconst callback = state & 1 ? onFulfilled : onRejected;\n\t\t\tif (callback) {\n\t\t\t\ttry {\n\t\t\t\t\t_settle(result, 1, callback(this.v));\n\t\t\t\t} catch (e) {\n\t\t\t\t\t_settle(result, 2, e);\n\t\t\t\t}\n\t\t\t\treturn result;\n\t\t\t} else {\n\t\t\t\treturn this;\n\t\t\t}\n\t\t}\n\t\tthis.o = function(_this) {\n\t\t\ttry {\n\t\t\t\tconst value = _this.v;\n\t\t\t\tif (_this.s & 1) {\n\t\t\t\t\t_settle(result, 1, onFulfilled ? onFulfilled(value) : value);\n\t\t\t\t} else if (onRejected) {\n\t\t\t\t\t_settle(result, 1, onRejected(value));\n\t\t\t\t} else {\n\t\t\t\t\t_settle(result, 2, value);\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(result, 2, e);\n\t\t\t}\n\t\t};\n\t\treturn result;\n\t}\n\treturn _Pact;\n})();\n\n// Settles a pact synchronously\nexport function _settle(pact, state, value) {\n\tif (!pact.s) {\n\t\tif (value instanceof _Pact) {\n\t\t\tif (value.s) {\n\t\t\t\tif (state & 1) {\n\t\t\t\t\tstate = value.s;\n\t\t\t\t}\n\t\t\t\tvalue = value.v;\n\t\t\t} else {\n\t\t\t\tvalue.o = _settle.bind(null, pact, state);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\tif (value && value.then) {\n\t\t\tvalue.then(_settle.bind(null, pact, state), _settle.bind(null, pact, 2));\n\t\t\treturn;\n\t\t}\n\t\tpact.s = state;\n\t\tpact.v = value;\n\t\tconst observer = pact.o;\n\t\tif (observer) {\n\t\t\tobserver(pact);\n\t\t}\n\t}\n}\n\nexport function _isSettledPact(thenable) {\n\treturn thenable instanceof _Pact && thenable.s & 1;\n}\n\n// Converts argument to a function that always returns a Promise\nexport function _async(f) {\n\treturn function() {\n\t\tfor (var args = [], i = 0; i < arguments.length; i++) {\n\t\t\targs[i] = arguments[i];\n\t\t}\n\t\ttry {\n\t\t\treturn Promise.resolve(f.apply(this, args));\n\t\t} catch(e) {\n\t\t\treturn Promise.reject(e);\n\t\t}\n\t}\n}\n\n// Awaits on a value that may or may not be a Promise (equivalent to the await keyword in ES2015, with continuations passed explicitly)\nexport function _await(value, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(value) : value;\n\t}\n\tif (!value || !value.then) {\n\t\tvalue = Promise.resolve(value);\n\t}\n\treturn then ? value.then(then) : value;\n}\n\n// Awaits on a value that may or may not be a Promise, then ignores it\nexport function _awaitIgnored(value, direct) {\n\tif (!direct) {\n\t\treturn value && value.then ? value.then(_empty) : Promise.resolve();\n\t}\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continue(value, then) {\n\treturn value && value.then ? value.then(then) : then(value);\n}\n\n// Proceeds after a value has resolved, or proceeds immediately if the value is not thenable\nexport function _continueIgnored(value) {\n\tif (value && value.then) {\n\t\treturn value.then(_empty);\n\t}\n}\n\n// Asynchronously iterate through an object that has a length property, passing the index as the first argument to the callback (even as the length property changes)\nexport function _forTo(array, body, check) {\n\tvar i = -1, pact, reject;\n\tfunction _cycle(result) {\n\t\ttry {\n\t\t\twhile (++i < array.length && (!check || !check())) {\n\t\t\t\tresult = body(i);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t}\n\t\t\tif (pact) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t} else {\n\t\t\t\tpact = result;\n\t\t\t}\n\t\t} catch (e) {\n\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t}\n\t}\n\t_cycle();\n\treturn pact;\n}\n\n// Asynchronously iterate through an object's properties (including properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forIn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tkeys.push(key);\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\n// Asynchronously iterate through an object's own properties (excluding properties inherited from the prototype)\n// Uses a snapshot of the object's properties\nexport function _forOwn(target, body, check) {\n\tvar keys = [];\n\tfor (var key in target) {\n\t\tif (Object.prototype.hasOwnProperty.call(target, key)) {\n\t\t\tkeys.push(key);\n\t\t}\n\t}\n\treturn _forTo(keys, function(i) { return body(keys[i]); }, check);\n}\n\nexport const _iteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.iterator || (Symbol.iterator = Symbol(\"Symbol.iterator\"))) : \"@@iterator\";\n\n// Asynchronously iterate through an object's values\n// Uses for...of if the runtime supports it, otherwise iterates until length on a copy\nexport function _forOf(target, body, check) {\n\tif (typeof target[_iteratorSymbol] === \"function\") {\n\t\tvar iterator = target[_iteratorSymbol](), step, pact, reject;\n\t\tfunction _cycle(result) {\n\t\t\ttry {\n\t\t\t\twhile (!(step = iterator.next()).done && (!check || !check())) {\n\t\t\t\t\tresult = body(step.value);\n\t\t\t\t\tif (result && result.then) {\n\t\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tresult.then(_cycle, reject || (reject = _settle.bind(null, pact = new _Pact(), 2)));\n\t\t\t\t\t\t\treturn;\n\t\t\t\t\t\t}\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tif (pact) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t} else {\n\t\t\t\t\tpact = result;\n\t\t\t\t}\n\t\t\t} catch (e) {\n\t\t\t\t_settle(pact || (pact = new _Pact()), 2, e);\n\t\t\t}\n\t\t}\n\t\t_cycle();\n\t\tif (iterator.return) {\n\t\t\tvar _fixup = function(value) {\n\t\t\t\ttry {\n\t\t\t\t\tif (!step.done) {\n\t\t\t\t\t\titerator.return();\n\t\t\t\t\t}\n\t\t\t\t} catch(e) {\n\t\t\t\t}\n\t\t\t\treturn value;\n\t\t\t}\n\t\t\tif (pact && pact.then) {\n\t\t\t\treturn pact.then(_fixup, function(e) {\n\t\t\t\t\tthrow _fixup(e);\n\t\t\t\t});\n\t\t\t}\n\t\t\t_fixup();\n\t\t}\n\t\treturn pact;\n\t}\n\t// No support for Symbol.iterator\n\tif (!(\"length\" in target)) {\n\t\tthrow new TypeError(\"Object is not iterable\");\n\t}\n\t// Handle live collections properly\n\tvar values = [];\n\tfor (var i = 0; i < target.length; i++) {\n\t\tvalues.push(target[i]);\n\t}\n\treturn _forTo(values, function(i) { return body(values[i]); }, check);\n}\n\nexport const _asyncIteratorSymbol = /*#__PURE__*/ typeof Symbol !== \"undefined\" ? (Symbol.asyncIterator || (Symbol.asyncIterator = Symbol(\"Symbol.asyncIterator\"))) : \"@@asyncIterator\";\n\n// Asynchronously iterate on a value using it's async iterator if present, or its synchronous iterator if missing\nexport function _forAwaitOf(target, body, check) {\n\tif (typeof target[_asyncIteratorSymbol] === \"function\") {\n\t\tvar pact = new _Pact();\n\t\tvar iterator = target[_asyncIteratorSymbol]();\n\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\treturn pact;\n\t\tfunction _resumeAfterBody(result) {\n\t\t\tif (check && check()) {\n\t\t\t\treturn _settle(pact, 1, iterator.return ? iterator.return().then(function() { return result; }) : result);\n\t\t\t}\n\t\t\titerator.next().then(_resumeAfterNext).then(void 0, _reject);\n\t\t}\n\t\tfunction _resumeAfterNext(step) {\n\t\t\tif (step.done) {\n\t\t\t\t_settle(pact, 1);\n\t\t\t} else {\n\t\t\t\tPromise.resolve(body(step.value)).then(_resumeAfterBody).then(void 0, _reject);\n\t\t\t}\n\t\t}\n\t\tfunction _reject(error) {\n\t\t\t_settle(pact, 2, iterator.return ? iterator.return().then(function() { return error; }) : error);\n\t\t}\n\t}\n\treturn Promise.resolve(_forOf(target, function(value) { return Promise.resolve(value).then(body); }, check));\n}\n\n// Asynchronously implement a generic for loop\nexport function _for(test, update, body) {\n\tvar stage;\n\tfor (;;) {\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t\tif (shouldContinue.then) {\n\t\t\tstage = 0;\n\t\t\tbreak;\n\t\t}\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.s;\n\t\t\t} else {\n\t\t\t\tstage = 1;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tif (update) {\n\t\t\tvar updateValue = update();\n\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\tstage = 2;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t}\n\tvar pact = new _Pact();\n\tvar reject = _settle.bind(null, pact, 2);\n\t(stage === 0 ? shouldContinue.then(_resumeAfterTest) : stage === 1 ? result.then(_resumeAfterBody) : updateValue.then(_resumeAfterUpdate)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tdo {\n\t\t\tif (update) {\n\t\t\t\tupdateValue = update();\n\t\t\t\tif (updateValue && updateValue.then && !_isSettledPact(updateValue)) {\n\t\t\t\t\tupdateValue.then(_resumeAfterUpdate).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\tshouldContinue = test();\n\t\t\tif (!shouldContinue || (_isSettledPact(shouldContinue) && !shouldContinue.v)) {\n\t\t\t\t_settle(pact, 1, result);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t}\n\t\t} while (!result || !result.then);\n\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterBody(result);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n\tfunction _resumeAfterUpdate() {\n\t\tif (shouldContinue = test()) {\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t} else {\n\t\t\t\t_resumeAfterTest(shouldContinue);\n\t\t\t}\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a do ... while loop\nexport function _do(body, test) {\n\tvar awaitBody;\n\tdo {\n\t\tvar result = body();\n\t\tif (result && result.then) {\n\t\t\tif (_isSettledPact(result)) {\n\t\t\t\tresult = result.v;\n\t\t\t} else {\n\t\t\t\tawaitBody = true;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t}\n\t\tvar shouldContinue = test();\n\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\tshouldContinue = shouldContinue.v;\n\t\t}\n\t\tif (!shouldContinue) {\n\t\t\treturn result;\n\t\t}\n\t} while (!shouldContinue.then);\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : shouldContinue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterBody(value) {\n\t\tresult = value;\n\t\tfor (;;) {\n\t\t\tshouldContinue = test();\n\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t}\n\t\t\tif (!shouldContinue) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (shouldContinue.then) {\n\t\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\tresult = result.v;\n\t\t\t\t} else {\n\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterTest(shouldContinue) {\n\t\tif (shouldContinue) {\n\t\t\tdo {\n\t\t\t\tresult = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tif (_isSettledPact(result)) {\n\t\t\t\t\t\tresult = result.v;\n\t\t\t\t\t} else {\n\t\t\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\t\t\treturn;\n\t\t\t\t\t}\n\t\t\t\t}\n\t\t\t\tshouldContinue = test();\n\t\t\t\tif (_isSettledPact(shouldContinue)) {\n\t\t\t\t\tshouldContinue = shouldContinue.v;\n\t\t\t\t}\n\t\t\t\tif (!shouldContinue) {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} while (!shouldContinue.then);\n\t\t\tshouldContinue.then(_resumeAfterTest).then(void 0, reject);\n\t\t} else {\n\t\t\t_settle(pact, 1, result);\n\t\t}\n\t}\n}\n\n// Asynchronously implement a switch statement\nexport function _switch(discriminant, cases) {\n\tvar dispatchIndex = -1;\n\tvar awaitBody;\n\touter: {\n\t\tfor (var i = 0; i < cases.length; i++) {\n\t\t\tvar test = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvar testValue = test();\n\t\t\t\tif (testValue && testValue.then) {\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tif (testValue === discriminant) {\n\t\t\t\t\tdispatchIndex = i;\n\t\t\t\t\tbreak;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Found the default case, set it as the pending dispatch case\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tif (dispatchIndex !== -1) {\n\t\t\tdo {\n\t\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\t\twhile (!body) {\n\t\t\t\t\tdispatchIndex++;\n\t\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t\t}\n\t\t\t\tvar result = body();\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tawaitBody = true;\n\t\t\t\t\tbreak outer;\n\t\t\t\t}\n\t\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\t\tdispatchIndex++;\n\t\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t\treturn result;\n\t\t}\n\t}\n\tconst pact = new _Pact();\n\tconst reject = _settle.bind(null, pact, 2);\n\t(awaitBody ? result.then(_resumeAfterBody) : testValue.then(_resumeAfterTest)).then(void 0, reject);\n\treturn pact;\n\tfunction _resumeAfterTest(value) {\n\t\tfor (;;) {\n\t\t\tif (value === discriminant) {\n\t\t\t\tdispatchIndex = i;\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tif (++i === cases.length) {\n\t\t\t\tif (dispatchIndex !== -1) {\n\t\t\t\t\tbreak;\n\t\t\t\t} else {\n\t\t\t\t\t_settle(pact, 1, result);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t}\n\t\t\ttest = cases[i][0];\n\t\t\tif (test) {\n\t\t\t\tvalue = test();\n\t\t\t\tif (value && value.then) {\n\t\t\t\t\tvalue.then(_resumeAfterTest).then(void 0, reject);\n\t\t\t\t\treturn;\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\tdispatchIndex = i;\n\t\t\t}\n\t\t}\n\t\tdo {\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tvar result = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tdispatchIndex++;\n\t\t} while (fallthroughCheck && !fallthroughCheck());\n\t\t_settle(pact, 1, result);\n\t}\n\tfunction _resumeAfterBody(result) {\n\t\tfor (;;) {\n\t\t\tvar fallthroughCheck = cases[dispatchIndex][2];\n\t\t\tif (!fallthroughCheck || fallthroughCheck()) {\n\t\t\t\tbreak;\n\t\t\t}\n\t\t\tdispatchIndex++;\n\t\t\tvar body = cases[dispatchIndex][1];\n\t\t\twhile (!body) {\n\t\t\t\tdispatchIndex++;\n\t\t\t\tbody = cases[dispatchIndex][1];\n\t\t\t}\n\t\t\tresult = body();\n\t\t\tif (result && result.then) {\n\t\t\t\tresult.then(_resumeAfterBody).then(void 0, reject);\n\t\t\t\treturn;\n\t\t\t}\n\t\t}\n\t\t_settle(pact, 1, result);\n\t}\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _call(body, then, direct) {\n\tif (direct) {\n\t\treturn then ? then(body()) : body();\n\t}\n\ttry {\n\t\tvar result = Promise.resolve(body());\n\t\treturn then ? result.then(then) : result;\n\t} catch (e) {\n\t\treturn Promise.reject(e);\n\t}\n}\n\n// Asynchronously call a function and swallow the result\nexport function _callIgnored(body, direct) {\n\treturn _call(body, _empty, direct);\n}\n\n// Asynchronously call a function and pass the result to explicitly passed continuations\nexport function _invoke(body, then) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(then);\n\t}\n\treturn then(result);\n}\n\n// Asynchronously call a function and swallow the result\nexport function _invokeIgnored(body) {\n\tvar result = body();\n\tif (result && result.then) {\n\t\treturn result.then(_empty);\n\t}\n}\n\n// Asynchronously call a function and send errors to recovery continuation\nexport function _catch(body, recover) {\n\ttry {\n\t\tvar result = body();\n\t} catch(e) {\n\t\treturn recover(e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(void 0, recover);\n\t}\n\treturn result;\n}\n\n// Asynchronously await a promise and pass the result to a finally continuation\nexport function _finallyRethrows(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer(true, e);\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer.bind(null, false), finalizer.bind(null, true));\n\t}\n\treturn finalizer(false, result);\n}\n\n// Asynchronously await a promise and invoke a finally continuation that always overrides the result\nexport function _finally(body, finalizer) {\n\ttry {\n\t\tvar result = body();\n\t} catch (e) {\n\t\treturn finalizer();\n\t}\n\tif (result && result.then) {\n\t\treturn result.then(finalizer, finalizer);\n\t}\n\treturn finalizer();\n}\n\n// Rethrow or return a value from a finally continuation\nexport function _rethrow(thrown, value) {\n\tif (thrown)\n\t\tthrow value;\n\treturn value;\n}\n\n// Empty function to implement break and other control flow that ignores asynchronous results\nexport function _empty() {\n}\n\n// Sentinel value for early returns in generators \nexport const _earlyReturn = /*#__PURE__*/ {};\n\n// Asynchronously call a function and send errors to recovery continuation, skipping early returns\nexport function _catchInGenerator(body, recover) {\n\treturn _catch(body, function(e) {\n\t\tif (e === _earlyReturn) {\n\t\t\tthrow e;\n\t\t}\n\t\treturn recover(e);\n\t});\n}\n\n// Asynchronous generator class; accepts the entrypoint of the generator, to which it passes itself when the generator should start\nexport const _AsyncGenerator = /*#__PURE__*/(function() {\n\tfunction _AsyncGenerator(entry) {\n\t\tthis._entry = entry;\n\t\tthis._pact = null;\n\t\tthis._resolve = null;\n\t\tthis._return = null;\n\t\tthis._promise = null;\n\t}\n\n\tfunction _wrapReturnedValue(value) {\n\t\treturn { value: value, done: true };\n\t}\n\tfunction _wrapYieldedValue(value) {\n\t\treturn { value: value, done: false };\n\t}\n\n\t_AsyncGenerator.prototype._yield = function(value) {\n\t\t// Yield the value to the pending next call\n\t\tthis._resolve(value && value.then ? value.then(_wrapYieldedValue) : _wrapYieldedValue(value));\n\t\t// Return a pact for an upcoming next/return/throw call\n\t\treturn this._pact = new _Pact();\n\t};\n\t_AsyncGenerator.prototype.next = function(value) {\n\t\t// Advance the generator, starting it if it has yet to be started\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tconst _entry = _this._entry;\n\t\t\t\tif (_entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the next call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Start the generator\n\t\t\t\t_this._entry = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\tfunction returnValue(value) {\n\t\t\t\t\t_this._resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t_this._resolve = null;\n\t\t\t\t}\n\t\t\t\tvar result = _entry(_this);\n\t\t\t\tif (result && result.then) {\n\t\t\t\t\tresult.then(returnValue, function(error) {\n\t\t\t\t\t\tif (error === _earlyReturn) {\n\t\t\t\t\t\t\treturnValue(_this._return);\n\t\t\t\t\t\t} else {\n\t\t\t\t\t\t\tconst pact = new _Pact();\n\t\t\t\t\t\t\t_this._resolve(pact);\n\t\t\t\t\t\t\t_this._pact = null;\n\t\t\t\t\t\t\t_this._resolve = null;\n\t\t\t\t\t\t\t_resolve(pact, 2, error);\n\t\t\t\t\t\t}\n\t\t\t\t\t});\n\t\t\t\t} else {\n\t\t\t\t\treturnValue(result);\n\t\t\t\t}\n\t\t\t} else {\n\t\t\t\t// Generator is started and a yield expression is pending, settle it\n\t\t\t\t_this._pact = null;\n\t\t\t\t_this._resolve = resolve;\n\t\t\t\t_settle(_pact, 1, value);\n\t\t\t}\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.return = function(value) {\n\t\t// Early return from the generator if started, otherwise abandons the generator\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the return call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return the specified value\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn resolve(value && value.then ? value.then(_wrapReturnedValue) : _wrapReturnedValue(value));\n\t\t\t}\n\t\t\t// Settle the yield expression with a rejected \"early return\" value\n\t\t\t_this._return = value;\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, _earlyReturn);\n\t\t});\n\t};\n\t_AsyncGenerator.prototype.throw = function(error) {\n\t\t// Inject an exception into the pending yield expression\n\t\tconst _this = this;\n\t\treturn _this._promise = new Promise(function (resolve, reject) {\n\t\t\tconst _pact = _this._pact;\n\t\t\tif (_pact === null) {\n\t\t\t\tif (_this._entry === null) {\n\t\t\t\t\t// Generator is started, but not awaiting a yield expression\n\t\t\t\t\t// Abandon the throw call!\n\t\t\t\t\treturn resolve(_this._promise);\n\t\t\t\t}\n\t\t\t\t// Generator is not started, abandon it and return a rejected Promise containing the error\n\t\t\t\t_this._entry = null;\n\t\t\t\treturn reject(error);\n\t\t\t}\n\t\t\t// Settle the yield expression with the value as a rejection\n\t\t\t_this._resolve = resolve;\n\t\t\t_this._pact = null;\n\t\t\t_settle(_pact, 2, error);\n\t\t});\n\t};\n\n\t_AsyncGenerator.prototype[_asyncIteratorSymbol] = function() {\n\t\treturn this;\n\t};\n\t\n\treturn _AsyncGenerator;\n})();\n","// Borrowed from https://github.com/ai/nanoid/blob/3.0.2/non-secure/index.js\r\n// This alphabet uses `A-Za-z0-9_-` symbols. A genetic algorithm helped\r\n// optimize the gzip compression for this alphabet.\r\nlet urlAlphabet =\r\n  'ModuleSymbhasOwnPr-0123456789ABCDEFGHNRVfgctiUvz_KqYTJkLxpZXIjQW'\r\n\r\n/**\r\n *\r\n * @public\r\n */\r\nexport let nanoid = (size = 21) => {\r\n  let id = ''\r\n  // A compact alternative for `for (var i = 0; i < step; i++)`.\r\n  let i = size\r\n  while (i--) {\r\n    // `| 0` is more compact and faster than `Math.floor()`.\r\n    id += urlAlphabet[(Math.random() * 64) | 0]\r\n  }\r\n  return id\r\n}\r\n","import { Dispatch, AnyAction } from 'redux'\r\nimport {\r\n  createAction,\r\n  PayloadAction,\r\n  ActionCreatorWithPreparedPayload\r\n} from './createAction'\r\nimport { ThunkDispatch } from 'redux-thunk'\r\nimport { FallbackIfUnknown, IsAny } from './tsHelpers'\r\nimport { nanoid } from './nanoid'\r\n\r\n// @ts-ignore we need the import of these types due to a bundling issue.\r\ntype _Keep = PayloadAction | ActionCreatorWithPreparedPayload<any, unknown>\r\n\r\nexport type BaseThunkAPI<\r\n  S,\r\n  E,\r\n  D extends Dispatch = Dispatch,\r\n  RejectedValue = undefined\r\n> = {\r\n  dispatch: D\r\n  getState: () => S\r\n  extra: E\r\n  requestId: string\r\n  signal: AbortSignal\r\n  rejectWithValue(value: RejectedValue): RejectWithValue<RejectedValue>\r\n}\r\n\r\n/**\r\n * @public\r\n */\r\nexport interface SerializedError {\r\n  name?: string\r\n  message?: string\r\n  stack?: string\r\n  code?: string\r\n}\r\n\r\nconst commonProperties: Array<keyof SerializedError> = [\r\n  'name',\r\n  'message',\r\n  'stack',\r\n  'code'\r\n]\r\n\r\nclass RejectWithValue<RejectValue> {\r\n  constructor(public readonly value: RejectValue) {}\r\n}\r\n\r\n// Reworked from https://github.com/sindresorhus/serialize-error\r\nexport const miniSerializeError = (value: any): SerializedError => {\r\n  if (typeof value === 'object' && value !== null) {\r\n    const simpleError: SerializedError = {}\r\n    for (const property of commonProperties) {\r\n      if (typeof value[property] === 'string') {\r\n        simpleError[property] = value[property]\r\n      }\r\n    }\r\n\r\n    return simpleError\r\n  }\r\n\r\n  return { message: String(value) }\r\n}\r\n\r\ntype AsyncThunkConfig = {\r\n  state?: unknown\r\n  dispatch?: Dispatch\r\n  extra?: unknown\r\n  rejectValue?: unknown\r\n}\r\n\r\ntype GetState<ThunkApiConfig> = ThunkApiConfig extends {\r\n  state: infer State\r\n}\r\n  ? State\r\n  : unknown\r\ntype GetExtra<ThunkApiConfig> = ThunkApiConfig extends { extra: infer Extra }\r\n  ? Extra\r\n  : unknown\r\ntype GetDispatch<ThunkApiConfig> = ThunkApiConfig extends {\r\n  dispatch: infer Dispatch\r\n}\r\n  ? FallbackIfUnknown<\r\n      Dispatch,\r\n      ThunkDispatch<\r\n        GetState<ThunkApiConfig>,\r\n        GetExtra<ThunkApiConfig>,\r\n        AnyAction\r\n      >\r\n    >\r\n  : ThunkDispatch<GetState<ThunkApiConfig>, GetExtra<ThunkApiConfig>, AnyAction>\r\n\r\ntype GetThunkAPI<ThunkApiConfig> = BaseThunkAPI<\r\n  GetState<ThunkApiConfig>,\r\n  GetExtra<ThunkApiConfig>,\r\n  GetDispatch<ThunkApiConfig>,\r\n  GetRejectValue<ThunkApiConfig>\r\n>\r\n\r\ntype GetRejectValue<ThunkApiConfig> = ThunkApiConfig extends {\r\n  rejectValue: infer RejectValue\r\n}\r\n  ? RejectValue\r\n  : unknown\r\n/**\r\n * A type describing the return value of the `payloadCreator` argument to `createAsyncThunk`.\r\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\r\n *\r\n * @public\r\n */\r\nexport type AsyncThunkPayloadCreatorReturnValue<\r\n  Returned,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n> =\r\n  | Promise<Returned | RejectWithValue<GetRejectValue<ThunkApiConfig>>>\r\n  | Returned\r\n  | RejectWithValue<GetRejectValue<ThunkApiConfig>>\r\n/**\r\n * A type describing the `payloadCreator` argument to `createAsyncThunk`.\r\n * Might be useful for wrapping `createAsyncThunk` in custom abstractions.\r\n *\r\n * @public\r\n */\r\nexport type AsyncThunkPayloadCreator<\r\n  Returned,\r\n  ThunkArg = void,\r\n  ThunkApiConfig extends AsyncThunkConfig = {}\r\n> = (\r\n  arg: ThunkArg,\r\n  thunkAPI: GetThunkAPI<ThunkApiConfig>\r\n) => AsyncThunkPayloadCreatorReturnValue<Returned, ThunkApiConfig>\r\n\r\n/**\r\n * A ThunkAction created by `createAsyncThunk`.\r\n * Dispatching it returns a Promise for either a\r\n * fulfilled or rejected action.\r\n * Also, the returned value contains a `abort()` method\r\n * that allows the asyncAction to be cancelled from the outside.\r\n *\r\n * @public\r\n */\r\nexport type AsyncThunkAction<\r\n  Returned,\r\n  ThunkArg,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n> = (\r\n  dispatch: GetDispatch<ThunkApiConfig>,\r\n  getState: () => GetState<ThunkApiConfig>,\r\n  extra: GetExtra<ThunkApiConfig>\r\n) => Promise<\r\n  | PayloadAction<Returned, string, { arg: ThunkArg; requestId: string }>\r\n  | PayloadAction<\r\n      undefined | GetRejectValue<ThunkApiConfig>,\r\n      string,\r\n      {\r\n        arg: ThunkArg\r\n        requestId: string\r\n        aborted: boolean\r\n        condition: boolean\r\n      },\r\n      SerializedError\r\n    >\r\n> & {\r\n  abort(reason?: string): void\r\n}\r\n\r\ntype AsyncThunkActionCreator<\r\n  Returned,\r\n  ThunkArg,\r\n  ThunkApiConfig extends AsyncThunkConfig\r\n> = IsAny<\r\n  ThunkArg,\r\n  // any handling\r\n  (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>,\r\n  // unknown handling\r\n  unknown extends ThunkArg\r\n    ? (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument not specified or specified as void or undefined\r\n    : [ThunkArg] extends [void] | [undefined]\r\n    ? () => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument contains void\r\n    : [void] extends [ThunkArg] // make optional\r\n    ? (arg?: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> // argument contains undefined\r\n    : [undefined] extends [ThunkArg]\r\n    ? WithStrictNullChecks<\r\n        // with strict nullChecks: make optional\r\n        (\r\n          arg?: ThunkArg\r\n        ) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>,\r\n        // without strict null checks this will match everything, so don't make it optional\r\n        (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>\r\n      > // default case: normal argument\r\n    : (arg: ThunkArg) => AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig>\r\n>\r\n\r\ninterface AsyncThunkOptions<\r\n  ThunkArg = void,\r\n  ThunkApiConfig extends AsyncThunkConfig = {}\r\n> {\r\n  /**\r\n   * A method to control whether the asyncThunk should be executed. Has access to the\r\n   * `arg`, `api.getState()` and `api.extra` arguments.\r\n   *\r\n   * @returns `true` if the asyncThunk should be executed, `false` if it should be skipped\r\n   */\r\n  condition?(\r\n    arg: ThunkArg,\r\n    api: Pick<GetThunkAPI<ThunkApiConfig>, 'getState' | 'extra'>\r\n  ): boolean\r\n  /**\r\n   * If `condition` returns `false`, the asyncThunk will be skipped.\r\n   * This option allows you to control whether a `rejected` action with `meta.condition == false`\r\n   * will be dispatched or not.\r\n   *\r\n   * @default `false`\r\n   */\r\n  dispatchConditionRejection?: boolean\r\n}\r\n\r\n/**\r\n *\r\n * @param typePrefix\r\n * @param payloadCreator\r\n * @param options\r\n *\r\n * @public\r\n */\r\nexport function createAsyncThunk<\r\n  Returned,\r\n  ThunkArg = void,\r\n  ThunkApiConfig extends AsyncThunkConfig = {}\r\n>(\r\n  typePrefix: string,\r\n  payloadCreator: (\r\n    arg: ThunkArg,\r\n    thunkAPI: GetThunkAPI<ThunkApiConfig>\r\n  ) =>\r\n    | Promise<Returned | RejectWithValue<GetRejectValue<ThunkApiConfig>>>\r\n    | Returned\r\n    | RejectWithValue<GetRejectValue<ThunkApiConfig>>,\r\n  options?: AsyncThunkOptions<ThunkArg, ThunkApiConfig>\r\n) {\r\n  type RejectedValue = GetRejectValue<ThunkApiConfig>\r\n\r\n  const fulfilled = createAction(\r\n    typePrefix + '/fulfilled',\r\n    (result: Returned, requestId: string, arg: ThunkArg) => {\r\n      return {\r\n        payload: result,\r\n        meta: { arg, requestId }\r\n      }\r\n    }\r\n  )\r\n\r\n  const pending = createAction(\r\n    typePrefix + '/pending',\r\n    (requestId: string, arg: ThunkArg) => {\r\n      return {\r\n        payload: undefined,\r\n        meta: { arg, requestId }\r\n      }\r\n    }\r\n  )\r\n\r\n  const rejected = createAction(\r\n    typePrefix + '/rejected',\r\n    (\r\n      error: Error | null,\r\n      requestId: string,\r\n      arg: ThunkArg,\r\n      payload?: RejectedValue\r\n    ) => {\r\n      const aborted = !!error && error.name === 'AbortError'\r\n      const condition = !!error && error.name === 'ConditionError'\r\n      return {\r\n        payload,\r\n        error: miniSerializeError(error || 'Rejected'),\r\n        meta: {\r\n          arg,\r\n          requestId,\r\n          aborted,\r\n          condition\r\n        }\r\n      }\r\n    }\r\n  )\r\n\r\n  let displayedWarning = false\r\n\r\n  const AC =\r\n    typeof AbortController !== 'undefined'\r\n      ? AbortController\r\n      : class implements AbortController {\r\n          signal: AbortSignal = {\r\n            aborted: false,\r\n            addEventListener() {},\r\n            dispatchEvent() {\r\n              return false\r\n            },\r\n            onabort() {},\r\n            removeEventListener() {}\r\n          }\r\n          abort() {\r\n            if (process.env.NODE_ENV !== 'production') {\r\n              if (!displayedWarning) {\r\n                displayedWarning = true\r\n                console.info(\r\n                  `This platform does not implement AbortController. \r\nIf you want to use the AbortController to react to \\`abort\\` events, please consider importing a polyfill like 'abortcontroller-polyfill/dist/abortcontroller-polyfill-only'.`\r\n                )\r\n              }\r\n            }\r\n          }\r\n        }\r\n\r\n  function actionCreator(\r\n    arg: ThunkArg\r\n  ): AsyncThunkAction<Returned, ThunkArg, ThunkApiConfig> {\r\n    return (dispatch, getState, extra) => {\r\n      const requestId = nanoid()\r\n\r\n      const abortController = new AC()\r\n      let abortReason: string | undefined\r\n\r\n      const abortedPromise = new Promise<never>((_, reject) =>\r\n        abortController.signal.addEventListener('abort', () =>\r\n          reject({ name: 'AbortError', message: abortReason || 'Aborted' })\r\n        )\r\n      )\r\n\r\n      function abort(reason?: string) {\r\n        abortReason = reason\r\n        abortController.abort()\r\n      }\r\n\r\n      const promise = (async function() {\r\n        let finalAction: ReturnType<typeof fulfilled | typeof rejected>\r\n        try {\r\n          if (\r\n            options &&\r\n            options.condition &&\r\n            options.condition(arg, { getState, extra }) === false\r\n          ) {\r\n            throw {\r\n              name: 'ConditionError',\r\n              message: 'Aborted due to condition callback returning false.'\r\n            }\r\n          }\r\n          dispatch(pending(requestId, arg))\r\n          finalAction = await Promise.race([\r\n            abortedPromise,\r\n            Promise.resolve(\r\n              payloadCreator(arg, {\r\n                dispatch,\r\n                getState,\r\n                extra,\r\n                requestId,\r\n                signal: abortController.signal,\r\n                rejectWithValue(value: RejectedValue) {\r\n                  return new RejectWithValue(value)\r\n                }\r\n              })\r\n            ).then(result => {\r\n              if (result instanceof RejectWithValue) {\r\n                return rejected(null, requestId, arg, result.value)\r\n              }\r\n              return fulfilled(result, requestId, arg)\r\n            })\r\n          ])\r\n        } catch (err) {\r\n          finalAction = rejected(err, requestId, arg)\r\n        }\r\n        // We dispatch the result action _after_ the catch, to avoid having any errors\r\n        // here get swallowed by the try/catch block,\r\n        // per https://twitter.com/dan_abramov/status/770914221638942720\r\n        // and https://redux-toolkit.js.org/tutorials/advanced-tutorial#async-error-handling-logic-in-thunks\r\n\r\n        const skipDispatch =\r\n          options &&\r\n          !options.dispatchConditionRejection &&\r\n          rejected.match(finalAction) &&\r\n          finalAction.meta.condition\r\n\r\n        if (!skipDispatch) {\r\n          dispatch(finalAction)\r\n        }\r\n        return finalAction\r\n      })()\r\n      return Object.assign(promise, { abort })\r\n    }\r\n  }\r\n\r\n  return Object.assign(\r\n    actionCreator as AsyncThunkActionCreator<\r\n      Returned,\r\n      ThunkArg,\r\n      ThunkApiConfig\r\n    >,\r\n    {\r\n      pending,\r\n      rejected,\r\n      fulfilled,\r\n      typePrefix\r\n    }\r\n  )\r\n}\r\n\r\ntype ActionTypesWithOptionalErrorAction =\r\n  | { error: any }\r\n  | { error?: never; payload: any }\r\ntype PayloadForActionTypesExcludingErrorActions<T> = T extends { error: any }\r\n  ? never\r\n  : T extends { payload: infer P }\r\n  ? P\r\n  : never\r\n\r\n/**\r\n * @public\r\n */\r\nexport function unwrapResult<R extends ActionTypesWithOptionalErrorAction>(\r\n  returned: R\r\n): PayloadForActionTypesExcludingErrorActions<R> {\r\n  if ('error' in returned) {\r\n    throw returned.error\r\n  }\r\n  return (returned as any).payload\r\n}\r\n\r\ntype WithStrictNullChecks<True, False> = undefined extends boolean\r\n  ? False\r\n  : True\r\n","import { enableES5 } from 'immer'\r\nexport * from 'redux'\r\nexport { default as createNextState, Draft } from 'immer'\r\nexport {\r\n  createSelector,\r\n  Selector,\r\n  OutputParametricSelector,\r\n  OutputSelector,\r\n  ParametricSelector\r\n} from 'reselect'\r\nexport { ThunkAction, ThunkDispatch } from 'redux-thunk'\r\n\r\n// We deliberately enable Immer's ES5 support, on the grounds that\r\n// we assume RTK will be used with React Native and other Proxy-less\r\n// environments.  In addition, that's how Immer 4 behaved, and since\r\n// we want to ship this in an RTK minor, we should keep the same behavior.\r\nenableES5()\r\n\r\nexport {\r\n  // js\r\n  configureStore,\r\n  // types\r\n  ConfigureEnhancersCallback,\r\n  ConfigureStoreOptions,\r\n  EnhancedStore\r\n} from './configureStore'\r\nexport {\r\n  // js\r\n  createAction,\r\n  getType,\r\n  // types\r\n  PayloadAction,\r\n  PayloadActionCreator,\r\n  ActionCreatorWithNonInferrablePayload,\r\n  ActionCreatorWithOptionalPayload,\r\n  ActionCreatorWithPayload,\r\n  ActionCreatorWithoutPayload,\r\n  ActionCreatorWithPreparedPayload,\r\n  PrepareAction\r\n} from './createAction'\r\nexport {\r\n  // js\r\n  createReducer,\r\n  // types\r\n  Actions,\r\n  CaseReducer,\r\n  CaseReducers\r\n} from './createReducer'\r\nexport {\r\n  // js\r\n  createSlice,\r\n  // types\r\n  CreateSliceOptions,\r\n  Slice,\r\n  CaseReducerActions,\r\n  SliceCaseReducers,\r\n  ValidateSliceCaseReducers,\r\n  CaseReducerWithPrepare,\r\n  SliceActionCreator\r\n} from './createSlice'\r\nexport {\r\n  // js\r\n  createImmutableStateInvariantMiddleware,\r\n  isImmutableDefault,\r\n  // types\r\n  ImmutableStateInvariantMiddlewareOptions\r\n} from './immutableStateInvariantMiddleware'\r\nexport {\r\n  // js\r\n  createSerializableStateInvariantMiddleware,\r\n  findNonSerializableValue,\r\n  isPlain,\r\n  // types\r\n  SerializableStateInvariantMiddlewareOptions\r\n} from './serializableStateInvariantMiddleware'\r\nexport {\r\n  // js\r\n  getDefaultMiddleware\r\n} from './getDefaultMiddleware'\r\nexport {\r\n  // types\r\n  ActionReducerMapBuilder\r\n} from './mapBuilders'\r\n\r\nexport { createEntityAdapter } from './entities/create_adapter'\r\nexport {\r\n  Dictionary,\r\n  EntityState,\r\n  EntityAdapter,\r\n  EntitySelectors,\r\n  EntityStateAdapter,\r\n  EntityId,\r\n  Update,\r\n  IdSelector,\r\n  Comparer\r\n} from './entities/models'\r\n\r\nexport {\r\n  AsyncThunkAction,\r\n  AsyncThunkPayloadCreatorReturnValue,\r\n  AsyncThunkPayloadCreator,\r\n  createAsyncThunk,\r\n  unwrapResult,\r\n  SerializedError\r\n} from './createAsyncThunk'\r\n\r\nexport { nanoid } from './nanoid'\r\n"]},"metadata":{},"sourceType":"module"}