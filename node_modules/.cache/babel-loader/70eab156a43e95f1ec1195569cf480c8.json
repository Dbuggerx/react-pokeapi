{"ast":null,"code":"/** PURE_IMPORTS_START tslib,_.._Observable,_.._Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nexport function fromFetch(input, init) {\n  return new Observable(function (subscriber) {\n    var controller = new AbortController();\n    var signal = controller.signal;\n    var abortable = true;\n    var unsubscribed = false;\n    var subscription = new Subscription();\n    subscription.add(function () {\n      unsubscribed = true;\n\n      if (abortable) {\n        controller.abort();\n      }\n    });\n    var perSubscriberInit;\n\n    if (init) {\n      if (init.signal) {\n        if (init.signal.aborted) {\n          controller.abort();\n        } else {\n          var outerSignal_1 = init.signal;\n\n          var outerSignalHandler_1 = function outerSignalHandler_1() {\n            if (!signal.aborted) {\n              controller.abort();\n            }\n          };\n\n          outerSignal_1.addEventListener('abort', outerSignalHandler_1);\n          subscription.add(function () {\n            return outerSignal_1.removeEventListener('abort', outerSignalHandler_1);\n          });\n        }\n      }\n\n      perSubscriberInit = tslib_1.__assign({}, init, {\n        signal: signal\n      });\n    } else {\n      perSubscriberInit = {\n        signal: signal\n      };\n    }\n\n    fetch(input, perSubscriberInit).then(function (response) {\n      abortable = false;\n      subscriber.next(response);\n      subscriber.complete();\n    }).catch(function (err) {\n      abortable = false;\n\n      if (!unsubscribed) {\n        subscriber.error(err);\n      }\n    });\n    return subscription;\n  });\n}","map":{"version":3,"sources":["../../../../src/internal/observable/dom/fetch.ts"],"names":[],"mappings":";AAAA,OAAO,KAAE,OAAT,MAAqB,OAArB;AACA,SAAS,UAAT,QAAuB,kBAAvB;AAoDA,SAAM,YAAN,QAA0B,oBAA1B;AACE,OAAA,SAAW,SAAX,CAAgC,KAAhC,EAAgC,IAAhC,EAAgC;AAC9B,SAAA,IAAM,UAAN,CAAmB,UAAI,UAAJ,EAAsB;AACzC,QAAM,UAAS,GAAA,IAAA,eAAA,EAAf;AACA,QAAI,MAAA,GAAS,UAAQ,CAAA,MAArB;AACA,QAAI,SAAA,GAAY,IAAhB;AAEA,QAAM,YAAY,GAAG,KAArB;AACA,QAAA,YAAgB,GAAC,IAAA,YAAA,EAAjB;AACE,IAAA,YAAA,CAAA,GAAA,CAAY,YAAQ;AACpB,MAAA,YAAI,GAAW,IAAf;;UACE,S,EAAW;AACZ,QAAA,UAAA,CAAA,KAAA;AACA;AAEH,KANE;AAOF,QAAI,iBAAJ;;QAEE,I,EAAI;UACF,IAAI,CAAA,M,EAAK;YACP,IAAA,CAAA,MAAA,CAAW,O,EAAQ;AACpB,UAAA,UAAA,CAAA,KAAA;AAAM,S,MACL;AACA,cAAM,aAAA,GAAA,IAAkB,CAAA,MAAxB;;cACE,oBAAmB,GAAE,SAArB,oBAAqB,GAAA;gBACnB,CAAA,MAAA,CAAA,O,EAAgB;AACjB,cAAA,UAAA,CAAA,KAAA;AACD;AACF,W;;AACA,UAAA,aAAa,CAAA,gBAAb,CAAuB,OAAvB,EAAuB,oBAAvB;AACD,UAAA,YAAA,CAAA,GAAA,CAAA,YAAA;AAAA,mBAAA,aAAA,CAAA,mBAAA,CAAA,OAAA,EAAA,oBAAA,CAAA;AAAA,WAAA;AACF;AAGD;;AACD,MAAA,iBAAA,GAAA,OAAA,CAAA,QAAA,CAAA,EAAA,EAAA,IAAA,EAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA,CAAA;AAAM,K,MACL;AACD,MAAA,iBAAA,GAAA;AAAA,QAAA,MAAA,EAAA;AAAA,OAAA;AAED;;AACE,IAAA,KAAA,CAAA,KAAA,EAAS,iBAAT,CAAA,CAAkB,IAAlB,CAAkB,UAAA,QAAA,EAAA;AAClB,MAAA,SAAA,GAAW,KAAX;AACA,MAAA,UAAU,CAAC,IAAX,CAAW,QAAX;AACC,MAAA,UAAM,CAAA,QAAN;KAHD,EAIA,KAJA,CAIA,UAAY,GAAZ,EAAkB;AAClB,MAAA,SAAK,GAAA,KAAL;;UAEE,CAAA,Y,EAAW;AACZ,QAAA,UAAA,CAAA,KAAA,CAAA,GAAA;AACA;AAEH,KAXE;AAYD,WAAA,YAAA;AACJ,GAnDG,CAAA","sourcesContent":["/** PURE_IMPORTS_START tslib,_.._Observable,_.._Subscription PURE_IMPORTS_END */\nimport * as tslib_1 from \"tslib\";\nimport { Observable } from '../../Observable';\nimport { Subscription } from '../../Subscription';\nexport function fromFetch(input, init) {\n    return new Observable(function (subscriber) {\n        var controller = new AbortController();\n        var signal = controller.signal;\n        var abortable = true;\n        var unsubscribed = false;\n        var subscription = new Subscription();\n        subscription.add(function () {\n            unsubscribed = true;\n            if (abortable) {\n                controller.abort();\n            }\n        });\n        var perSubscriberInit;\n        if (init) {\n            if (init.signal) {\n                if (init.signal.aborted) {\n                    controller.abort();\n                }\n                else {\n                    var outerSignal_1 = init.signal;\n                    var outerSignalHandler_1 = function () {\n                        if (!signal.aborted) {\n                            controller.abort();\n                        }\n                    };\n                    outerSignal_1.addEventListener('abort', outerSignalHandler_1);\n                    subscription.add(function () { return outerSignal_1.removeEventListener('abort', outerSignalHandler_1); });\n                }\n            }\n            perSubscriberInit = tslib_1.__assign({}, init, { signal: signal });\n        }\n        else {\n            perSubscriberInit = { signal: signal };\n        }\n        fetch(input, perSubscriberInit).then(function (response) {\n            abortable = false;\n            subscriber.next(response);\n            subscriber.complete();\n        }).catch(function (err) {\n            abortable = false;\n            if (!unsubscribed) {\n                subscriber.error(err);\n            }\n        });\n        return subscription;\n    });\n}\n//# sourceMappingURL=fetch.js.map\n"]},"metadata":{},"sourceType":"module"}