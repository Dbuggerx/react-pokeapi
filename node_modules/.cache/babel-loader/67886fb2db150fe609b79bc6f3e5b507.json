{"ast":null,"code":"function _classCallCheck(instance, Constructor) {\n  if (!(instance instanceof Constructor)) {\n    throw new TypeError(\"Cannot call a class as a function\");\n  }\n}\n\nfunction _possibleConstructorReturn(self, call) {\n  if (!self) {\n    throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\");\n  }\n\n  return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self;\n}\n\nfunction _inherits(subClass, superClass) {\n  if (typeof superClass !== \"function\" && superClass !== null) {\n    throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass);\n  }\n\n  subClass.prototype = Object.create(superClass && superClass.prototype, {\n    constructor: {\n      value: subClass,\n      enumerable: false,\n      writable: true,\n      configurable: true\n    }\n  });\n  if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass;\n}\n\nimport { Observable, Subject } from 'rxjs';\nexport var StateObservable = function (_Observable) {\n  _inherits(StateObservable, _Observable);\n\n  function StateObservable(stateSubject, initialState) {\n    _classCallCheck(this, StateObservable);\n\n    var _this = _possibleConstructorReturn(this, (StateObservable.__proto__ || Object.getPrototypeOf(StateObservable)).call(this, function (subscriber) {\n      var subscription = _this.__notifier.subscribe(subscriber);\n\n      if (subscription && !subscription.closed) {\n        subscriber.next(_this.value);\n      }\n\n      return subscription;\n    }));\n\n    _this.value = initialState;\n    _this.__notifier = new Subject();\n    _this.__subscription = stateSubject.subscribe(function (value) {\n      // We only want to update state$ if it has actually changed since\n      // redux requires reducers use immutability patterns.\n      // This is basically what distinctUntilChanged() does but it's so simple\n      // we don't need to pull that code in\n      if (value !== _this.value) {\n        _this.value = value;\n\n        _this.__notifier.next(value);\n      }\n    });\n    return _this;\n  }\n\n  return StateObservable;\n}(Observable);","map":{"version":3,"sources":["/home/dcestari/Documents/projects/react/react-pokeapi/.yarn/$$virtual/redux-observable-virtual-ded5a19f62/0/cache/redux-observable-npm-1.2.0-46cb237dc3-3.zip/node_modules/redux-observable/lib/esm/StateObservable.js"],"names":["_classCallCheck","instance","Constructor","TypeError","_possibleConstructorReturn","self","call","ReferenceError","_inherits","subClass","superClass","prototype","Object","create","constructor","value","enumerable","writable","configurable","setPrototypeOf","__proto__","Observable","Subject","StateObservable","_Observable","stateSubject","initialState","_this","getPrototypeOf","subscriber","subscription","__notifier","subscribe","closed","next","__subscription"],"mappings":"AAAA,SAASA,eAAT,CAAyBC,QAAzB,EAAmCC,WAAnC,EAAgD;AAAE,MAAI,EAAED,QAAQ,YAAYC,WAAtB,CAAJ,EAAwC;AAAE,UAAM,IAAIC,SAAJ,CAAc,mCAAd,CAAN;AAA2D;AAAE;;AAEzJ,SAASC,0BAAT,CAAoCC,IAApC,EAA0CC,IAA1C,EAAgD;AAAE,MAAI,CAACD,IAAL,EAAW;AAAE,UAAM,IAAIE,cAAJ,CAAmB,2DAAnB,CAAN;AAAwF;;AAAC,SAAOD,IAAI,KAAK,OAAOA,IAAP,KAAgB,QAAhB,IAA4B,OAAOA,IAAP,KAAgB,UAAjD,CAAJ,GAAmEA,IAAnE,GAA0ED,IAAjF;AAAwF;;AAEhP,SAASG,SAAT,CAAmBC,QAAnB,EAA6BC,UAA7B,EAAyC;AAAE,MAAI,OAAOA,UAAP,KAAsB,UAAtB,IAAoCA,UAAU,KAAK,IAAvD,EAA6D;AAAE,UAAM,IAAIP,SAAJ,CAAc,6DAA6D,OAAOO,UAAlF,CAAN;AAAsG;;AAACD,EAAAA,QAAQ,CAACE,SAAT,GAAqBC,MAAM,CAACC,MAAP,CAAcH,UAAU,IAAIA,UAAU,CAACC,SAAvC,EAAkD;AAAEG,IAAAA,WAAW,EAAE;AAAEC,MAAAA,KAAK,EAAEN,QAAT;AAAmBO,MAAAA,UAAU,EAAE,KAA/B;AAAsCC,MAAAA,QAAQ,EAAE,IAAhD;AAAsDC,MAAAA,YAAY,EAAE;AAApE;AAAf,GAAlD,CAArB;AAAqK,MAAIR,UAAJ,EAAgBE,MAAM,CAACO,cAAP,GAAwBP,MAAM,CAACO,cAAP,CAAsBV,QAAtB,EAAgCC,UAAhC,CAAxB,GAAsED,QAAQ,CAACW,SAAT,GAAqBV,UAA3F;AAAwG;;AAE9e,SAASW,UAAT,EAAqBC,OAArB,QAAoC,MAApC;AAEA,OAAO,IAAIC,eAAe,GAAG,UAAUC,WAAV,EAAuB;AAClDhB,EAAAA,SAAS,CAACe,eAAD,EAAkBC,WAAlB,CAAT;;AAEA,WAASD,eAAT,CAAyBE,YAAzB,EAAuCC,YAAvC,EAAqD;AACnD1B,IAAAA,eAAe,CAAC,IAAD,EAAOuB,eAAP,CAAf;;AAEA,QAAII,KAAK,GAAGvB,0BAA0B,CAAC,IAAD,EAAO,CAACmB,eAAe,CAACH,SAAhB,IAA6BR,MAAM,CAACgB,cAAP,CAAsBL,eAAtB,CAA9B,EAAsEjB,IAAtE,CAA2E,IAA3E,EAAiF,UAAUuB,UAAV,EAAsB;AAClJ,UAAIC,YAAY,GAAGH,KAAK,CAACI,UAAN,CAAiBC,SAAjB,CAA2BH,UAA3B,CAAnB;;AACA,UAAIC,YAAY,IAAI,CAACA,YAAY,CAACG,MAAlC,EAA0C;AACxCJ,QAAAA,UAAU,CAACK,IAAX,CAAgBP,KAAK,CAACZ,KAAtB;AACD;;AACD,aAAOe,YAAP;AACD,KAN4C,CAAP,CAAtC;;AAQAH,IAAAA,KAAK,CAACZ,KAAN,GAAcW,YAAd;AACAC,IAAAA,KAAK,CAACI,UAAN,GAAmB,IAAIT,OAAJ,EAAnB;AACAK,IAAAA,KAAK,CAACQ,cAAN,GAAuBV,YAAY,CAACO,SAAb,CAAuB,UAAUjB,KAAV,EAAiB;AAC7D;AACA;AACA;AACA;AACA,UAAIA,KAAK,KAAKY,KAAK,CAACZ,KAApB,EAA2B;AACzBY,QAAAA,KAAK,CAACZ,KAAN,GAAcA,KAAd;;AACAY,QAAAA,KAAK,CAACI,UAAN,CAAiBG,IAAjB,CAAsBnB,KAAtB;AACD;AACF,KATsB,CAAvB;AAUA,WAAOY,KAAP;AACD;;AAED,SAAOJ,eAAP;AACD,CA9B4B,CA8B3BF,UA9B2B,CAAtB","sourcesContent":["function _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _possibleConstructorReturn(self, call) { if (!self) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return call && (typeof call === \"object\" || typeof call === \"function\") ? call : self; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function, not \" + typeof superClass); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, enumerable: false, writable: true, configurable: true } }); if (superClass) Object.setPrototypeOf ? Object.setPrototypeOf(subClass, superClass) : subClass.__proto__ = superClass; }\n\nimport { Observable, Subject } from 'rxjs';\n\nexport var StateObservable = function (_Observable) {\n  _inherits(StateObservable, _Observable);\n\n  function StateObservable(stateSubject, initialState) {\n    _classCallCheck(this, StateObservable);\n\n    var _this = _possibleConstructorReturn(this, (StateObservable.__proto__ || Object.getPrototypeOf(StateObservable)).call(this, function (subscriber) {\n      var subscription = _this.__notifier.subscribe(subscriber);\n      if (subscription && !subscription.closed) {\n        subscriber.next(_this.value);\n      }\n      return subscription;\n    }));\n\n    _this.value = initialState;\n    _this.__notifier = new Subject();\n    _this.__subscription = stateSubject.subscribe(function (value) {\n      // We only want to update state$ if it has actually changed since\n      // redux requires reducers use immutability patterns.\n      // This is basically what distinctUntilChanged() does but it's so simple\n      // we don't need to pull that code in\n      if (value !== _this.value) {\n        _this.value = value;\n        _this.__notifier.next(value);\n      }\n    });\n    return _this;\n  }\n\n  return StateObservable;\n}(Observable);"]},"metadata":{},"sourceType":"module"}