{"ast":null,"code":"import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../redux/pokemonPage\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTypedSelector } from \"../redux/types\";\nimport { actions as pokemonDataActions } from \"../redux/pokemonData\";\nimport { pokemonRoute } from \"../routeManager\";\nexport function useFetchInitialPageEffect() {\n  var dispatch = useDispatch();\n  var pageState = useTypedSelector(function (state) {\n    return state.pokemonPage;\n  });\n  React.useEffect(function () {\n    if (pageState.currentPage === 0) dispatch(actions.fetchPage({\n      offset: 0,\n      size: 20\n    }));\n  }, [dispatch, pageState.currentPage]);\n  React.useEffect(function () {\n    dispatch(pokemonDataActions.clearData());\n  }, [dispatch]);\n}\nexport function useFetchPage() {\n  var dispatch = useDispatch();\n  var pageState = useTypedSelector(function (state) {\n    return state.pokemonPage;\n  });\n  return {\n    fetchPrevPage: function fetchPrevPage() {\n      var _pageState$data;\n\n      if ((_pageState$data = pageState.data) === null || _pageState$data === void 0 ? void 0 : _pageState$data.previous) dispatch(actions.fetchPage({\n        url: pageState.data.previous\n      }));\n    },\n    fetchNextPage: function fetchNextPage() {\n      var _pageState$data2;\n\n      if ((_pageState$data2 = pageState.data) === null || _pageState$data2 === void 0 ? void 0 : _pageState$data2.next) dispatch(actions.fetchPage({\n        url: pageState.data.next\n      }));\n    }\n  };\n}\nexport function usePokemonPageState() {\n  return useTypedSelector(function (state) {\n    return state.pokemonPage;\n  });\n}\nexport function useGoToDetails() {\n  var history = useHistory();\n  return function (pokemonName) {\n    history.push(pokemonRoute.generate({\n      pokemonName\n    }));\n  };\n}","map":{"version":3,"sources":["/home/dcestari/Documents/projects/react/react-pokeapi/src/hooks/pokemonPage.ts"],"names":["React","useDispatch","actions","useHistory","useTypedSelector","pokemonDataActions","pokemonRoute","useFetchInitialPageEffect","dispatch","pageState","state","pokemonPage","useEffect","currentPage","fetchPage","offset","size","clearData","useFetchPage","fetchPrevPage","data","previous","url","fetchNextPage","next","usePokemonPageState","useGoToDetails","history","pokemonName","push","generate"],"mappings":"AAAA,OAAOA,KAAP,MAAkB,OAAlB;AACA,SAASC,WAAT,QAA4B,aAA5B;AACA,SAASC,OAAT,QAAwB,sBAAxB;AACA,SAASC,UAAT,QAA2B,kBAA3B;AACA,SAASC,gBAAT,QAAiC,gBAAjC;AACA,SAASF,OAAO,IAAIG,kBAApB,QAA8C,sBAA9C;AACA,SAASC,YAAT,QAA6B,iBAA7B;AAEA,OAAO,SAASC,yBAAT,GAAqC;AAC1C,MAAMC,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,SAAS,GAAGL,gBAAgB,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAV;AAAA,GAAN,CAAlC;AAEAX,EAAAA,KAAK,CAACY,SAAN,CAAgB,YAAM;AACpB,QAAIH,SAAS,CAACI,WAAV,KAA0B,CAA9B,EACEL,QAAQ,CACNN,OAAO,CAACY,SAAR,CAAkB;AAChBC,MAAAA,MAAM,EAAE,CADQ;AAEhBC,MAAAA,IAAI,EAAE;AAFU,KAAlB,CADM,CAAR;AAMH,GARD,EAQG,CAACR,QAAD,EAAWC,SAAS,CAACI,WAArB,CARH;AAUAb,EAAAA,KAAK,CAACY,SAAN,CAAgB,YAAM;AACpBJ,IAAAA,QAAQ,CAACH,kBAAkB,CAACY,SAAnB,EAAD,CAAR;AACD,GAFD,EAEG,CAACT,QAAD,CAFH;AAGD;AAED,OAAO,SAASU,YAAT,GAAwB;AAC7B,MAAMV,QAAQ,GAAGP,WAAW,EAA5B;AACA,MAAMQ,SAAS,GAAGL,gBAAgB,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAV;AAAA,GAAN,CAAlC;AAEA,SAAO;AACLQ,IAAAA,aAAa,EAAE,yBAAM;AAAA;;AACnB,6BAAIV,SAAS,CAACW,IAAd,oDAAI,gBAAgBC,QAApB,EACEb,QAAQ,CACNN,OAAO,CAACY,SAAR,CAAkB;AAChBQ,QAAAA,GAAG,EAAEb,SAAS,CAACW,IAAV,CAAeC;AADJ,OAAlB,CADM,CAAR;AAKH,KARI;AASLE,IAAAA,aAAa,EAAE,yBAAM;AAAA;;AACnB,8BAAId,SAAS,CAACW,IAAd,qDAAI,iBAAgBI,IAApB,EACEhB,QAAQ,CACNN,OAAO,CAACY,SAAR,CAAkB;AAChBQ,QAAAA,GAAG,EAAEb,SAAS,CAACW,IAAV,CAAeI;AADJ,OAAlB,CADM,CAAR;AAKH;AAhBI,GAAP;AAkBD;AAED,OAAO,SAASC,mBAAT,GAA+B;AACpC,SAAOrB,gBAAgB,CAAC,UAAAM,KAAK;AAAA,WAAIA,KAAK,CAACC,WAAV;AAAA,GAAN,CAAvB;AACD;AAED,OAAO,SAASe,cAAT,GAA0B;AAC/B,MAAMC,OAAO,GAAGxB,UAAU,EAA1B;AAEA,SAAO,UAACyB,WAAD,EAAyB;AAC9BD,IAAAA,OAAO,CAACE,IAAR,CAAavB,YAAY,CAACwB,QAAb,CAAsB;AAAEF,MAAAA;AAAF,KAAtB,CAAb;AACD,GAFD;AAGD","sourcesContent":["import React from \"react\";\nimport { useDispatch } from \"react-redux\";\nimport { actions } from \"../redux/pokemonPage\";\nimport { useHistory } from \"react-router-dom\";\nimport { useTypedSelector } from \"../redux/types\";\nimport { actions as pokemonDataActions } from \"../redux/pokemonData\";\nimport { pokemonRoute } from \"../routeManager\";\n\nexport function useFetchInitialPageEffect() {\n  const dispatch = useDispatch();\n  const pageState = useTypedSelector(state => state.pokemonPage);\n\n  React.useEffect(() => {\n    if (pageState.currentPage === 0)\n      dispatch(\n        actions.fetchPage({\n          offset: 0,\n          size: 20\n        })\n      );\n  }, [dispatch, pageState.currentPage]);\n\n  React.useEffect(() => {\n    dispatch(pokemonDataActions.clearData());\n  }, [dispatch]);\n}\n\nexport function useFetchPage() {\n  const dispatch = useDispatch();\n  const pageState = useTypedSelector(state => state.pokemonPage);\n\n  return {\n    fetchPrevPage: () => {\n      if (pageState.data?.previous)\n        dispatch(\n          actions.fetchPage({\n            url: pageState.data.previous\n          })\n        );\n    },\n    fetchNextPage: () => {\n      if (pageState.data?.next)\n        dispatch(\n          actions.fetchPage({\n            url: pageState.data.next\n          })\n        );\n    }\n  };\n}\n\nexport function usePokemonPageState() {\n  return useTypedSelector(state => state.pokemonPage);\n}\n\nexport function useGoToDetails() {\n  const history = useHistory();\n\n  return (pokemonName: string) => {\n    history.push(pokemonRoute.generate({ pokemonName }));\n  };\n}\n"]},"metadata":{},"sourceType":"module"}