{"ast":null,"code":"/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n  var config;\n\n  if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n    config = configOrBufferSize;\n  } else {\n    config = {\n      bufferSize: configOrBufferSize,\n      windowTime: windowTime,\n      refCount: false,\n      scheduler: scheduler\n    };\n  }\n\n  return function (source) {\n    return source.lift(shareReplayOperator(config));\n  };\n}\n\nfunction shareReplayOperator(_a) {\n  var _b = _a.bufferSize,\n      bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b,\n      _c = _a.windowTime,\n      windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c,\n      useRefCount = _a.refCount,\n      scheduler = _a.scheduler;\n  var subject;\n  var refCount = 0;\n  var subscription;\n  var hasError = false;\n  var isComplete = false;\n  return function shareReplayOperation(source) {\n    refCount++;\n\n    if (!subject || hasError) {\n      hasError = false;\n      subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n      subscription = source.subscribe({\n        next: function next(value) {\n          subject.next(value);\n        },\n        error: function error(err) {\n          hasError = true;\n          subject.error(err);\n        },\n        complete: function complete() {\n          isComplete = true;\n          subscription = undefined;\n          subject.complete();\n        }\n      });\n    }\n\n    var innerSub = subject.subscribe(this);\n    this.add(function () {\n      refCount--;\n      innerSub.unsubscribe();\n\n      if (subscription && !isComplete && useRefCount && refCount === 0) {\n        subscription.unsubscribe();\n        subscription = undefined;\n        subject = undefined;\n      }\n    });\n  };\n}","map":{"version":3,"sources":["../../../src/internal/operators/shareReplay.ts"],"names":[],"mappings":"AACA;AA2DA,SAAM,aAAN,QACE,kBADF;AAKE,OAAA,SAA8B,WAA9B,CAA8B,kBAA9B,EAA8B,UAA9B,EAA8B,SAA9B,EAA8B;AAC9B,MAAI,MAAJ;;MACE,kBAAS,IAAA,OAAwC,kBAAxC,KAAwC,Q,EAAA;AAClD,IAAA,MAAA,GAAA,kBAAA;AAAM,G,MACL;AACE,IAAA,MAAA,GAAA;AACA,MAAA,UAAU,EAAA,kBADV;AAEA,MAAA,UAAU,EAAA,UAFV;AAGA,MAAA,QAAA,EAAS,KAHT;AAIA,MAAA,SAAA,EAAA;AAJA,KAAA;AAMJ;;AACD,SAAA,UAAA,MAAA,EAAA;AAAA,WAAA,MAAA,CAAA,IAAA,CAAA,mBAAA,CAAA,MAAA,CAAA,CAAA;AAAA,GAAA;AAED;;AACE,SAAA,mBAAA,CAAA,EAAA,EAAA;AAKA,MAAI,EAAA,GAAA,EAAqC,CAAC,UAA1C;AAAA,MAA0C,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,MAAA,CAAA,iBAAA,GAAA,EAA1C;AAAA,MAA0C,EAAA,GAAA,EAAA,CAAA,UAA1C;AAAA,MAA0C,UAAA,GAAA,EAAA,KAAA,KAAA,CAAA,GAAA,MAAA,CAAA,iBAAA,GAAA,EAA1C;AAAA,MAA0C,WAAA,GAAA,EAAA,CAAA,QAA1C;AAAA,MAA0C,SAAA,GAAA,EAAA,CAAA,SAA1C;AACA,MAAI,OAAJ;AACA,MAAI,QAAA,GAAA,CAAJ;AACA,MAAI,YAAJ;AACA,MAAI,QAAA,GAAU,KAAd;AAEA,MAAA,UAAO,GAAS,KAAhB;AACE,SAAA,SAAW,oBAAX,CAAW,MAAX,EAAW;AACX,IAAA,QAAK;;QACH,CAAA,OAAA,IAAW,Q,EAAM;AACjB,MAAA,QAAO,GAAG,KAAV;AACA,MAAA,OAAA,GAAA,IAAY,aAAZ,CAAsB,UAAtB,EAAgC,UAAhC,EAAgC,SAAhC,CAAA;AACE,MAAA,YAAI,GAAA,MAAC,CAAA,SAAD,CAAU;AACd,QAAA,IAAA,EAAK,cAAA,KAAA,EAAI;AAAA,UAAA,OAAA,CAAA,IAAA,CAAA,KAAA;AAAA,SADK;AAEZ,QAAA,KAAA,EAAA,eAAW,GAAX,EAAgB;AAChB,UAAA,QAAQ,GAAA,IAAR;AACD,UAAA,OAAA,CAAA,KAAA,CAAA,GAAA;AACD,SALc;AAMZ,QAAA,QAAA,EAAA,oBAAkB;AAClB,UAAA,UAAA,GAAY,IAAZ;AACA,UAAA,YAAQ,GAAA,SAAR;AACD,UAAA,OAAA,CAAA,QAAA;AACA;AAVa,OAAV,CAAJ;AAaJ;;AACA,QAAI,QAAK,GAAA,OAAA,CAAA,SAAA,CAAA,IAAA,CAAT;AACE,SAAA,GAAA,CAAA,YAAW;AACX,MAAA,QAAQ;AACR,MAAA,QAAI,CAAA,WAAJ;;UACE,YAAY,IAAC,CAAA,UAAb,IAA2B,WAA3B,IAA2B,QAAA,KAAA,C,EAAA;AAC3B,QAAA,YAAY,CAAA,WAAZ;AACA,QAAA,YAAU,GAAA,SAAV;AACD,QAAA,OAAA,GAAA,SAAA;AACA;AACH,KARE;AASL,GA7BG","sourcesContent":["/** PURE_IMPORTS_START _ReplaySubject PURE_IMPORTS_END */\nimport { ReplaySubject } from '../ReplaySubject';\nexport function shareReplay(configOrBufferSize, windowTime, scheduler) {\n    var config;\n    if (configOrBufferSize && typeof configOrBufferSize === 'object') {\n        config = configOrBufferSize;\n    }\n    else {\n        config = {\n            bufferSize: configOrBufferSize,\n            windowTime: windowTime,\n            refCount: false,\n            scheduler: scheduler\n        };\n    }\n    return function (source) { return source.lift(shareReplayOperator(config)); };\n}\nfunction shareReplayOperator(_a) {\n    var _b = _a.bufferSize, bufferSize = _b === void 0 ? Number.POSITIVE_INFINITY : _b, _c = _a.windowTime, windowTime = _c === void 0 ? Number.POSITIVE_INFINITY : _c, useRefCount = _a.refCount, scheduler = _a.scheduler;\n    var subject;\n    var refCount = 0;\n    var subscription;\n    var hasError = false;\n    var isComplete = false;\n    return function shareReplayOperation(source) {\n        refCount++;\n        if (!subject || hasError) {\n            hasError = false;\n            subject = new ReplaySubject(bufferSize, windowTime, scheduler);\n            subscription = source.subscribe({\n                next: function (value) { subject.next(value); },\n                error: function (err) {\n                    hasError = true;\n                    subject.error(err);\n                },\n                complete: function () {\n                    isComplete = true;\n                    subscription = undefined;\n                    subject.complete();\n                },\n            });\n        }\n        var innerSub = subject.subscribe(this);\n        this.add(function () {\n            refCount--;\n            innerSub.unsubscribe();\n            if (subscription && !isComplete && useRefCount && refCount === 0) {\n                subscription.unsubscribe();\n                subscription = undefined;\n                subject = undefined;\n            }\n        });\n    };\n}\n//# sourceMappingURL=shareReplay.js.map\n"]},"metadata":{},"sourceType":"module"}