{"ast":null,"code":"import { useSelector } from \"react-redux\";\nexport var useTypedSelector = useSelector;","map":{"version":3,"sources":["/home/dcestari/Documents/projects/react/react-pokeapi/src/redux/types.ts"],"names":["useSelector","useTypedSelector"],"mappings":"AAGA,SAA+BA,WAA/B,QAAkD,aAAlD;AAuBA,OAAO,IAAMC,gBAAgD,GAAGD,WAAzD","sourcesContent":["import { Action } from \"redux\";\nimport { Epic } from \"redux-observable\";\nimport { Observable } from \"rxjs\";\nimport { TypedUseSelectorHook, useSelector } from \"react-redux\";\nimport rootReducer from \"./rootReducer\";\nimport observableFetch from \"./observableFetch\";\nimport { AnyAction } from \"@reduxjs/toolkit\";\n\nexport type ObservableFetch<T> = (...args: Parameters<typeof fetch>) => Observable<T>;\n\nexport type AppState = ReturnType<typeof rootReducer>;\n\nexport type EpicDependencies = {\n  observableFetch: typeof observableFetch;\n};\n\n/**\n * @typeparam A - The Action type\n */\nexport type TypedEpic<A extends Action = AnyAction> = Epic<\n  A,\n  A,\n  AppState,\n  EpicDependencies\n>;\n\nexport const useTypedSelector: TypedUseSelectorHook<AppState> = useSelector;\n\nexport type LoadableResource<T> = {\n  loading: boolean;\n  error: string | undefined;\n  data: T | undefined;\n};\n"]},"metadata":{},"sourceType":"module"}